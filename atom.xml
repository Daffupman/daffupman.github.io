<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://daffupman.github.io</id>
    <title></title>
    <updated>2020-11-09T14:02:24.044Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://daffupman.github.io"/>
    <link rel="self" href="https://daffupman.github.io/atom.xml"/>
    <logo>https://daffupman.github.io/images/avatar.png</logo>
    <icon>https://daffupman.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, </rights>
    <entry>
        <title type="html"><![CDATA[MySQL的索引和SQL优化]]></title>
        <id>https://daffupman.github.io/WZxqM5YDi/</id>
        <link href="https://daffupman.github.io/WZxqM5YDi/">
        </link>
        <updated>2020-11-07T13:21:55.000Z</updated>
        <content type="html"><![CDATA[<p>对于MySQL来说，可以使用sql语句查询出我们需要的数据，这是最基本的功能。在表中数据量比较小的情况下，SQL的性能差异并不明显，但是在表数据量比较大的时候，SQL执行的效率就有明显的时间差异。这里会记录我们如何发现SQL的性能问题，如何优化SQL以及优化的底层原理。</p>
<h2 id="sql优化">SQL优化</h2>
<h3 id="如何找出效率低的sql">如何找出效率低的SQL</h3>
<p>要解决SQL效率低的问题就是如何发现哪些SQL导致了执行效率。常用的方法就是 <code>打开慢查询日志</code> ，方式如下：</p>
<pre><code class="language-bash"># 开启/关闭慢查询日志，默认off
set global slow_query_log = ON/OFF
# 设置慢查询日志的输出位置
set global slow_query_log_file = log/slow_query.log
# 设置慢查询的时间阀值，默认10秒，需要重新打开会话可见。测试的时候一般设置成1秒
set global long_query_time = 1
# 开启/关闭 记录没有使用索引的sql
set global log_queries_not_using_indexes = ON/OFF
</code></pre>
<p>这样所有的慢查询sql都会记录到 <code>log/slow_query.log</code> 文件里了。我们可以直接阅读文件里的内容，来分析sql的执行问题。但是一般都是借助工具来分析，主要有两种工具：</p>
<ul>
<li>mysql的官方工具 <code>mysqldumpslow</code>，使用命令：<pre><code class="language-bash">mysqldumpslow [OPTS...][LOGS...]
</code></pre>
</li>
<li>percona工具，这是第三方的，需要先下载(https://www.percona.com/downloads/percona-toolkit/3.2.1/binary/redhat/7/x86_64/percona-toolkit-3.2.1-1.el7.x86_64.rpm)：<pre><code class="language-bash">yum install -y perl-DBD-MySQL.x86_64 perl-DBI.x86 perl-Time-HiRes.x86_64 perl-IO-Socket-SSL.noarch perl-TermReadKey.x86_64 perl-Digest-MD5
rpm -ivh percona-toolkit-3.2.1-1.el7.x86_64.rpm
</code></pre>
</li>
</ul>
<blockquote>
<p>数据库实时监控sql语句：</p>
<pre><code class="language-mysql">  SELECT id, `user`, `host`, DB, command, `time`, state, info 
  FROM information_schema.PROCESSLIST
  WHERE TIME &gt;= 60;
</code></pre>
</blockquote>
<h3 id="分析执行计划">分析执行计划</h3>
<p>在获取到耗时较长的sql或我们刚写sql性能如何的时候，我们可以使用 <code>explain + SQL</code> 来输出sql的执行计划。<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201022224740.png" alt="explain语法" loading="lazy"><br>
执行某条sql输出的执行计划示例：<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201025213701.png" alt="示例执行计划" loading="lazy"><br>
可以看出执行计划有很多列，这里给出各个列的大致解释：</p>
<ul>
<li><code>id</code>：sql执行的顺序。id的值为一个数字或null。当id为一个数字的时候，表示查询执行的顺序；当id为null时，表示此行数据是由其他查询通过union出来的结果集。id值相同时，由上到下执行，id值不同，由大到小执行。</li>
<li><code>select_type</code>：查询类型，可选的值有：
<ul>
<li>SIMPLE：不包含子查询或是UNION操作的查询，多表JOIN也是SIMPLE；</li>
<li>PRIMARY：查询中如果包含任何子查询，那么最外层的查询则被标记为PRIMARY；</li>
<li>SUBQUERY：SELECT列表中的子查询；</li>
<li>DEPENDENT SUBQUERY：依赖外部结果的子查询；</li>
<li>UNION：union操作的第二个或是之后的查询的值为union；</li>
<li>DEPENDENT UNION：当union做为子查询时，第二个或第二个后的查询的select_type值；</li>
<li>UNION RESULT：UNION产生的结果集；</li>
<li>DERIVED：出现在FROM子句中的子查询。</li>
</ul>
</li>
<li><code>table</code>：指明从哪个表中获取数据。&lt;unionM,N&gt;由id为M和N查询union产生的结果集。&lt;derived N&gt;/&lt;subquery N&gt; 由id为n的查询产生的结果。</li>
<li><code>partitions</code>：对于分区表，显示查询的分区id；对于非分区表，显示NULL；</li>
<li><code>type</code>：索引使用的类型。<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201025223733.png" alt="type列的值" loading="lazy"></li>
<li><code>possible_keys</code>：查询中可能会用到的索引；</li>
<li><code>key</code>：查询是实际用到的索引；</li>
<li><code>key_len</code>：实际使用索引的最大长度，由字段长度决定的；</li>
<li><code>ref</code>：表示哪些列或常量被用于索引查找；</li>
<li><code>rows</code>：根据统计信息预估的扫描的行数；</li>
<li><code>filtered</code>：表示返回结果的行数占需读取行数的百分比；</li>
<li><code>extra</code>：sql查询的一些额外的信息，可能显示的如下
<ul>
<li>distinct：优化distinct操作，在找到第一匹配的元组后即停止；</li>
<li>not exists：使用not exists来优化查询；</li>
<li>using filesort：使用文件来进行排序，通常会出现在order by或group by查询中；</li>
<li>using index：使用了覆盖索引进行查询；</li>
<li>using temporary：MySQL需要使用临时表来处理查询，常见于排序，子查询和分组查询；</li>
<li>using where：需要在MySQL服务器层使用where条件来过滤数据；</li>
<li>select tables optimized away：直接通过索引来获得数据，不用访问表。</li>
</ul>
</li>
</ul>
<h3 id="如何优化sql">如何优化sql</h3>
<p>可以从优化sql查询所涉及到的表中的索引或改写sql以达到更好的利用索引的目的。索引可以告诉存储引擎如何快速的查询到所需要的数据。InnoDB支持的索引类型有：</p>
<ul>
<li>Btree索引：平常使用中，如果没有说明索引的类型，一般都是Btree索引；
<ul>
<li>使用B+树的结构存储索引数据；</li>
<li>适用于全值匹配的查询
<blockquote>
<p>class_name = 'mysql' 或 class_name in ('mysql', 'postgreSQL')</p>
</blockquote>
</li>
<li>适合处理范围查找
<blockquote>
<p>study_cnt between 1000 and 3000 或 study_cnt &gt; 3000</p>
</blockquote>
</li>
<li>Btree索引的从索引的最左侧开始匹配查找列</li>
</ul>
</li>
<li>自适应Hash索引：为优化查询性能自动建立的，不需要开发人员或DBA手动管理；</li>
<li>全文索引：使用elasticsearch或solr</li>
<li>空间索引：地理位置的索引（不推荐）</li>
</ul>
<p>应该在什么列上建立索引？</p>
<ol>
<li>在where子句中的列，这些列是否有比较好的筛选性（列值的重复越小的，筛选性越好）</li>
<li>包含在ORDER BY、GROUP BY、DISTINCT中的字段</li>
<li>多表JOIN的关联列
<blockquote>
<p>创建索引：create index idx_xx ON table_name(column_name)<br>
查看索引：show index from table_name<br>
删除索引：alter table table_name drop index idx_xx</p>
</blockquote>
</li>
</ol>
<p>如何选择符合索引键的顺序？</p>
<ol>
<li>区分度最高的列放在联合索引的最左侧</li>
<li>使用最频繁的列放到联合索引的最左侧</li>
<li>尽量把字段长度小的列放在联合索引列的最左侧</li>
</ol>
<p>Btree索引的限制：</p>
<ul>
<li>只能从最左侧开始按索引键的顺序使用索引，不能跳过索引键</li>
<li>NOT IN和&lt;&gt;操作无法使用索引</li>
<li>索引列上不能使用表达式或者函数</li>
</ul>
<p>索引并非越多越好，索引可以提高查询效率，也会降低插入和更新的效率。使用IN查询是可以用到索引，但是IN查询列表很大，mysql引擎会认为使用全表扫描的效率更高而放弃使用索引。查询过滤的顺序也不必与索引键顺序相同才可以使用到索引，mysql引擎会自动调整顺序以适应索引顺序从而使用到索引。</p>
<h3 id="改写sql">改写SQL</h3>
<p>改写SQL的原则：</p>
<ul>
<li>使用outer join代替not in（MySQL8.0会自动转换）</li>
<li>使用CTE代替子查询</li>
<li>拆分复杂的大SQL为多个简单的小SQL</li>
<li>使用计算列优化查询<pre><code class="language-bash"># 可以生成一个total_score计算列。为计算列添加索引，可优化查询速度。
  alter table imc_classvalue add column total_score DECIMAL(3,1) as (content_score + level_score + logic_score) 
</code></pre>
</li>
</ul>
<h3 id="表设计的优化">表设计的优化</h3>
<ol>
<li>
<p>表属性尽量不要设置为NULL。<br>
NULL是默认行为，如果不指定列字段为NOT NULL的，那么它就是NULL的。NULL并非不占用存储空间，反而需要MySQL需要额外的存储空间和逻辑处理，而且对于可为null的索引列，其使用和统计都会更加复杂。NULL参与的查询是需要使用IS NULL/IS NOT NULL作为条件的；当索引为NULL的值作为条件时，这个sql不会用到索引，NULL参与的计算，其结果都为NULL，聚合查询的结果都会忽略值NULL的记录；在排序中NULL值所在列也会排在最前面。</p>
</li>
<li>
<p>不随意设置数据类型<br>
创建表时要指定主键，主键不应该具有业务含义。虽然MySQL允许创建表时不指定主键，但是在表中没有非空整型唯一索引的时候InnoDB会自动添加隐式主键。<br>
选择合适的数据类型和恰当的取值范围。使用存储所需的最小数据类型；选择简单的数据类型；存储小数直接选择decimal；尽量避免使用text和blob。<br>
不建议使用枚举ENUM类型。枚举类型的值都是从允许值列表中选择的，这个列表在创建表结构就定义好了。枚举的优点是：枚举存储是数字，数据会更加紧凑；允许值提前定义，MySQL可以检查出数据的正确性。查询枚举列值的时候，默认显示的是枚举的值，如果想查询枚举的索引，需要给列加0。比如<code>select name, gender from user;</code> 可以查出枚举列gender的枚举值，而 <code>select name, gender + 0 from user;</code> 可以查出枚举列gender的枚举索引。使用枚举同样需要注意：</p>
<ul>
<li>对枚举列使用sum、avg等聚合函数的时候，会使用枚举列的索引。因为聚合函数的参数是数字；</li>
<li>对枚举列排序的时候，是根据其索引排序的；如果要按值排序，需要使用concat函数；</li>
<li>如果将数据存储到ENUM列中，则将数字视为可能值得索引，存储的值是具有该索引的枚举成员。如果存储的是字符串的数字，MySQL会先转成数值类型，去匹配索引序号。</li>
</ul>
</li>
<li>
<p>正确的使用索引。<br>
字符串类型的查询的时候没有使用引号，是不会使用索引的。where条件左边的字段参与了函数或数学运算，不会使用索引；联合索引最左前缀顺序不匹配，不使用索引。<br>
不再使用的索引需要及时删除，否则MySQL需要维护索引，浪费空间和性能。为选择性低的列创建索引意义不大。列值过长，可以选择部分前缀作为索引，而不是整列加上索引。表记录不超过1000行，不需要创建索引。一张表的索引不要超过5个。</p>
<blockquote>
<p>select count(distinct(concat(first_name, left(last_name, 3))))/count(*) from user;  # 查询出的值越接近1，代表选择性越好</p>
</blockquote>
</li>
</ol>
<h3 id="其他地方的优化">其他地方的优化</h3>
<ol>
<li>
<p>MySQL连接设置<br>
MySQL默认的连接超时是8小时(28800秒)，对应的配置参数是 <code>wait_timeout</code>。一般在连接的参数配置做自动重连。</p>
<blockquote>
<p>jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;chararchterEncoding=utf8&amp;autoReconnect=true</p>
</blockquote>
<p>但是autoReconnect是有副作用的。原有连接上的事务将会被回滚，连接中持有的表将会全部释放，连接关联的会话session将会丢失，连接中定义的用户变量将会丢失，连接中定义的预编译SQL将会丢失。可以修改MySQL配置，避免断开连接。</p>
<blockquote>
<p>[mysqld]<br>
wait_timeout = 288000<br>
interactive_timeout = 28800</p>
</blockquote>
<p>连接池的配置同样也会影响连接，如HikariCP配置：</p>
<ul>
<li>maximum-pool-size：最大连接数目。超过这个数目，新的数据库访问线程会被阻塞。推荐大小为cpu核心数*2+硬盘数；</li>
<li>minimum-idle：最小连接数目；</li>
<li>max-lifetime：最大连接生命时间，用来设置一个connection在连接池中的存活时间；</li>
<li>idle-timeout：一个链接idle状态的最大时长，超时则被释放。</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Shiro安全框架]]></title>
        <id>https://daffupman.github.io/a5-Z-yWdo/</id>
        <link href="https://daffupman.github.io/a5-Z-yWdo/">
        </link>
        <updated>2020-11-07T04:40:16.000Z</updated>
        <content type="html"><![CDATA[<p>最近的项目用了shiro框架，自己也搜索了一些入门资料。比较推荐的是跟着涛哥学shiro，内容翔实，举例丰富，有着配套的代码库。链接：https://www.iteye.com/blog/jinnianshilongnian-2018398。现在是对学习到的内容做个总结。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL8.0的新特性]]></title>
        <id>https://daffupman.github.io/2mvyKxMdI/</id>
        <link href="https://daffupman.github.io/2mvyKxMdI/">
        </link>
        <updated>2020-11-07T04:01:21.000Z</updated>
        <content type="html"><![CDATA[<p>MySQL8.0提供了一些实用的功能特性，这里会一一举例介绍。</p>
<h2 id="通用表达式common-table-expressions">通用表达式（Common Table Expressions）</h2>
<p>CTE会生成临时表，但只会在查询期间有效，这个临时表在这个查询中可以多次引用和自引用。它的语法：<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201021222724.png" alt="" loading="lazy"><br>
这个特性会比较适合写一些表中存在递归场景的查询，如：</p>
<pre><code class="language-mysql">    # CTE递归生成序列
    WITH RECURSIVE test(n) AS (
        SELECT 1 AS n
        UNION ALL
        SELECT 1+n FROM test WHERE n &lt; 10
    )
    SELECT * FROM test
</code></pre>
<h2 id="窗口函数">窗口函数</h2>
<p>提供了更方便的统计功能，语法如下：<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201021224651.png" alt="" loading="lazy"><br>
其中funcation_name可以是以下的函数：</p>
<table>
<thead>
<tr>
<th>函数名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>聚合函数</td>
<td>聚合函数都可以作为窗口函数使用</td>
</tr>
<tr>
<td>ROW_NUMBER()</td>
<td>返回窗口分区内数据的行号</td>
</tr>
<tr>
<td>RANK()</td>
<td>类似于row_number，只是对于相同数据会产生重复的行号，之后的数据行号会产生间隔</td>
</tr>
<tr>
<td>DENSE_RANK()</td>
<td>类似于rank，区别在于当组内某行数据重复时，虽然行号会重复，当后续的行号不会产生间隔</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL拾贝]]></title>
        <id>https://daffupman.github.io/mysql-shi-bei/</id>
        <link href="https://daffupman.github.io/mysql-shi-bei/">
        </link>
        <updated>2020-11-06T14:36:10.000Z</updated>
        <content type="html"><![CDATA[<p>MySQL是一款非常流行，免费高性能的数据库。但是在对了解MySQl之前，需要先了解一下数据库的基本概念，这在数据库领域是通识的。接着是对MySQL的一些基础做一下简单的介绍。再着就是MySQL的高级部分了，有索引优化，MySQL版本以及服务器的配置等介绍。</p>
<h2 id="什么是数据库">什么是数据库</h2>
<p>数据库（Database），顾名思义，就是一个存储数据的仓库，本质上还是一个文件系统。但，它会按照特定的格式将数据存储起来，方便我们对数据库中的数据进行增加、删除、修改和查询等操作。</p>
<p>计算机中主要有两个地方可以存储数据。一个是内存，一个是磁盘。数据存储在内存中会有这样明显的有点：存储和访问的速度很快，但是在断电和程序结束时，数据就会被清空。而且内存相对于磁盘来说，容量比较小，价格贵。把数据存储到磁盘上，是可以永久保存下去的，但是操作数据的速度就远没有存储在内存中那么快了。存储在内存或磁盘都是有各自的优点的，我们可以利用内存快的优点来存储一些访问频繁的数据，而不活跃的数据可以放到磁盘中。重要的数据还是要存储在磁盘中的。</p>
<h2 id="数据库的类型">数据库的类型</h2>
<p>现代的数据库主要有两类：关系型和非关系型。他们的区别可以相比较着来看：</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">关系型</th>
<th style="text-align:center">非关系型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">结构上</td>
<td style="text-align:center">数据存储在二维表中</td>
<td style="text-align:center">数据存储的时候没有固定的结构</td>
</tr>
<tr>
<td style="text-align:center">事务上</td>
<td style="text-align:center">支持事务的ACID</td>
<td style="text-align:center">对事务的支持较弱，但是对数据的并发处理性能好</td>
</tr>
<tr>
<td style="text-align:center">SQL支持</td>
<td style="text-align:center">支持SQL</td>
<td style="text-align:center">不支持SQL</td>
</tr>
<tr>
<td style="text-align:center">总结</td>
<td style="text-align:center">适合使用在数据存在一定关系，需要关联查询，需要事务支持和SQL的场景</td>
<td style="text-align:center">适合对数据结构灵活，不需要事务，要求读写并发的场景</td>
</tr>
</tbody>
</table>
<h2 id="mysql安装">MySQL安装</h2>
<p>由于数据库一般都是放在linux上面的，这里就装在linux系统上面了，用的是centos7。首先要去官网下载安装，地址：https://downloads.mysql.com/archives/get/p/23/file/mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz。然后上传到linux服务器上，我这里是放到opt目录下的，安装的具体步骤如下：</p>
<ol>
<li>
<p>首先要解压文件，设置用户</p>
<pre><code class="language-bash"># 进入opt目录
cd /opt
# 解压文件
tar -xvJf mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz
# 名字过长，重命名并移动到/usr/local下
mv mysql-8.0.20-linux-glibc2.12-x86_64 /usr/local/mysql-8.0.20
# 给mysql创建一个专用的帐户，最好也设置密码
useradd mysql
passwd mysql
</code></pre>
</li>
<li>
<p>添加配置</p>
<pre><code class="language-bash"># 修改配置文件
vi /etc/my.cnf
</code></pre>
<p>配置文件的内容如下</p>
<blockquote>
<p>[client]<br>
port=3306<br>
socket=/usr/local/mysql-8.0.20/mysql.sock</p>
<p>[mysqld]<br>
port=3306<br>
user=mysql<br>
socket=/usr/local/mysql-8.0.20/mysql.sock<br>
basedir=/usr/local/mysql-8.0.20<br>
datadir=/usr/local/mysql-8.0.20/data</p>
</blockquote>
<p>根据配置文件的 <code>datadir</code> 项，创建一个data目录</p>
<pre><code class="language-bash">mkdir data
</code></pre>
<p>修改mysql软件的目录的所属者</p>
<pre><code class="language-bash">chown -R mysql.mysql /usr/local/mysql-8.0.20
</code></pre>
</li>
<li>
<p>运行和修改MySQL<br>
初始化mysql，注意这里会生成一个密码</p>
<pre><code class="language-bash">/usr/local/mysql-8.0.20/bin/mysqld  --initialize --user=mysql --basedir=/usr/local/mysql-8.0.20 --datadir=/usr/local/mysql-8.0.20/data/
</code></pre>
<p>拷贝启动文件</p>
<pre><code class="language-bash">cp /usr/local/mysql-8.0.20/support-files/mysql.server /etc/init.d/mysqld
</code></pre>
<p>启动并连接mysql，这里输入的密码就是初始化时生成的密码</p>
<pre><code class="language-bash">service mysqld start
/usr/local/mysql-8.0.20/bin/mysql -uroot -p
</code></pre>
<p>进入mysql后，一定要先修改密码</p>
<pre><code class="language-bash"># 将root帐户的密码设置成root
alter user 'root'@'localhost' identified by 'root';
</code></pre>
<p>此时也可以创建用户</p>
<pre><code class="language-bash"># 创建daff@localhost用户，密码是daff
create user 'daff'@'localhost' identified by 'daff';
# 给daff@localhost授予所有数据库的所有表的所有权限
grant *all privileges on *.* to 'daff'@'localhost';
# 刷新权限，使得用户的权限生效
flush privileges；
</code></pre>
<p>修改root用户可远程连接，对于所有要远程连接的帐户，都需要这样设置</p>
<pre><code class="language-bash"># 在所有的机器上都可以使用root身份连接过来
update mysq.user set host = '%' where user = 'root';
# 设置远程连接的密码，使用mysql_native_password是为了和很多的数据库客户端兼容
alter user 'root'@'%' identified with mysql_native_password by 'root';
</code></pre>
<blockquote>
<p>如果远程客户端连接不上mysql，需要检查一下防火墙是否关闭或端口是否开放。</p>
</blockquote>
</li>
</ol>
<h2 id="mysql常见的存储引擎">MySQL常见的存储引擎</h2>
<p>MySQL支持多种存储引擎，具体如下：</p>
<table>
<thead>
<tr>
<th>引擎名称</th>
<th>事务</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><em><strong>InnoDB</strong></em></td>
<td>Y</td>
<td>事务型存储引擎</td>
</tr>
<tr>
<td>MyISAM</td>
<td>N</td>
<td>MySQL5.6之前的默认引擎，最常用的非事务型存储引擎</td>
</tr>
<tr>
<td>CSV</td>
<td>N</td>
<td>以CSV格式存储的非事务型存储引擎</td>
</tr>
<tr>
<td>Archive</td>
<td>N</td>
<td>只允许查询和新增数据而不允许修改的非事务型存储引擎，占用空间小</td>
</tr>
<tr>
<td>Memory</td>
<td>N</td>
<td>一种易失性非事务型存储引擎</td>
</tr>
</tbody>
</table>
<p>但常用的只有InnoDB和MyISAM。最重要的还是InnoDB，再来具体看看这种存储引擎的特点：</p>
<ul>
<li>支持ACID；</li>
<li>数据按主键聚集存储；</li>
<li>支持行级锁和MVCC（多版本并发控制，进一步避免读写操作的阻塞）；</li>
<li>支持BTree和自适应Hash索引；</li>
<li>支持全文和空间索引（最好不用）。</li>
</ul>
<h2 id="mysql的数据类型">MySQL的数据类型</h2>
<p>存储在MySQL中的数据主要又三种类型：数值类型、日期时间类型和字符串类型。<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20190513123402.png" alt="MySQL数据类型——数值类型" loading="lazy"><br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20190513123528.png" alt="MySQL数据类型——日期时间类型" loading="lazy"><br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20190513123646.png" alt="MySQL数据类型——字符串类型" loading="lazy"></p>
<p>在创建数据库表的时候，需要认真考虑名称以及字段的类型，一般我们有以下的原则来作为指导：</p>
<ul>
<li>为数据选择合适的数据类型
<ul>
<li>优先选择符合存储数据需要的最小数据类型</li>
<li>谨慎使用ENUM和TEXT，这会影响到查询的性能，如果要使用，最好独立成一张表。text类型的列不要有默认值。</li>
<li>财务相关的数值类型，必须使用decimal。</li>
</ul>
</li>
<li>为表和列选择合适的名字
<ul>
<li>所有数据库对象名称必须使用小写字母，可使用下划线分割；</li>
<li>所有数据库对象名称定义禁止使用MySQL保留关键字；</li>
<li>数据对象的命名需要做到见名知义，最好不要超过32个字符；</li>
<li>临时库表需要以tmp为前缀，日期为后缀；</li>
<li>备份库表以bak为前缀，日期为后缀</li>
</ul>
</li>
</ul>
<h2 id="sql常用语法">SQL常用语法</h2>
<h3 id="表结构相关的操作">表结构相关的操作</h3>
<ul>
<li>创建表<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201107002406.png" alt="创建表的语法" loading="lazy"></li>
<li>修改表<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201107002654.png" alt="修改表的语法" loading="lazy"></li>
<li>删除表<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201107002850.png" alt="删除表的语法" loading="lazy"></li>
<li>查看表结构<pre><code class="language-bash">desc tb_name;
# 查看表的ddl
show create table tb_name;
</code></pre>
</li>
<li>单表约束
<ul>
<li>主键约束：<code>primary key</code></li>
<li>唯一约束：<code>unique</code></li>
<li>非空约束：<code>not null</code></li>
<li>默认约束：<code>default</code></li>
</ul>
</li>
</ul>
<h3 id="表数据相关的操作">表数据相关的操作</h3>
<ul>
<li>新增数据<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201107003403.png" alt="新增SQL语法" loading="lazy"></li>
<li>删除数据<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201107003704.png" alt="删除SQL语法" loading="lazy"></li>
<li>修改数据<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201107003747.png" alt="修改SQL语法" loading="lazy"></li>
<li>查询数据<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201107003515.png" alt="查询SQL语法" loading="lazy"></li>
<li>表的复制<pre><code class="language-bash"># 复制表结构
create table new_tb_name like old_tb_name;
# 复制表结构和数据
create table new_tb_name select * from old_tb_name;
</code></pre>
</li>
<li>视图<br>
视图是一个逻辑的存储结构，也可以看出一张虚拟的表。可以像查询表一样查询视图。视图本身不存储数据。创建视图语法：<pre><code class="language-bash">CREATE VIEW view_name
AS SELECT [ALL | DISTINCT | DISTINCTROW]
select_expr [, select_expr ...]
[FROM table_references]
[WHERE where_condition]
</code></pre>
</li>
</ul>
<h2 id="系统函数">系统函数</h2>
<p>MySQL提供了丰富的函数来处理数据，以下会罗列一些比较常用的函数。</p>
<h3 id="时间函数">时间函数</h3>
<table>
<thead>
<tr>
<th>函数名</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>CURDATE()/CURTIME()</td>
<td style="text-align:left">返回当前日期/返回当前时间</td>
</tr>
<tr>
<td>NOW()</td>
<td style="text-align:left">返回当前的日期和时间</td>
</tr>
<tr>
<td>DATE_FORMAT(date, fmt)</td>
<td style="text-align:left">按照fmt的格式，对日期date进行格式化</td>
</tr>
<tr>
<td>SEC_TO_TIME(seconds)</td>
<td style="text-align:left">把秒数转换成时间（小时：分：秒）</td>
</tr>
<tr>
<td>TIME_TO_SEC(seconds)</td>
<td style="text-align:left">把时间（小时：分：秒）转换成秒数</td>
</tr>
<tr>
<td>DATEDIFF(date1,date2)</td>
<td style="text-align:left">返回date1和date2相差的天数</td>
</tr>
<tr>
<td>DATE_ADD(date, INTERVAL expr unit)</td>
<td style="text-align:left">对给定的日期增加或减少指定的时间单元（unit:DAY/HOUR/MINUTS/SECOND）</td>
</tr>
<tr>
<td>EXTRACT(unit FROM date)</td>
<td style="text-align:left">返回日期date的指定部分</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<pre><code class="language-bash">SELECT DATE_FORMAT(NOW(), '%Y / %m / %d  %H : %i : %s'); # 按格式输出 2020 / 10 / 22  05 : 38 : 43
SELECT SEC_TO_TIME(60) # 输出 00:01:00
SELECT TIME_TO_SEC('1:00:00') # 输出 3600

SELECT NOW(),
    DATE_ADD(NOW(), INTERVAL 1 DAY), # 当前时间加一天
    DATE_ADD(NOW(), INTERVAL 1 YEAR),  # 当前时间加一年
    DATE_ADD(NOW(), INTERVAL -1 DAY), # 当前时间减一天
    DATE_ADD(NOW(), INTERVAL '-1:30' HOUR_MINUTE); # 当前时间减1.5h
    
SELECT EXTRACT(YEAR FROM now()) # 提取当前日期的年份
</code></pre>
<h3 id="字符串函数">字符串函数</h3>
<table>
<thead>
<tr>
<th>函数名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>CONCAT(str1, str2, ...)</td>
<td>把字符串str1，str2等连接成一个字符串</td>
</tr>
<tr>
<td>CONCAT_WS(sep, str1, str2, ...)</td>
<td>用指定的分隔符sep连接字符串</td>
</tr>
<tr>
<td>CHAR_LENGTH(str)</td>
<td>返回字符串str的字符个数（1个字符=3个字节）</td>
</tr>
<tr>
<td>LENGTH(str)</td>
<td>返回字符串str的字节个数</td>
</tr>
<tr>
<td>FORMAT(X, D [, locale])</td>
<td>将数字N格式化</td>
</tr>
<tr>
<td>LEFT(str, len) / RIGHT(str, len)</td>
<td>从字符串的左/右起返回len长度的子字符串</td>
</tr>
<tr>
<td>SUBSTRING(str, pos[, len])</td>
<td>从字符串str的pos位置起返回长度为len的子串</td>
</tr>
<tr>
<td>SUBSTRING_INDEX(str, delim, count)</td>
<td>返回字符串str按delim分隔的前count个子字符串</td>
</tr>
<tr>
<td>LOCATE(substr, str)</td>
<td>在字符串str中返回子串substr第一次出现的位置</td>
</tr>
<tr>
<td>TRIM([remstr FROM] str)</td>
<td>删除字符串str两端的指定的remstr</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<pre><code class="language-bash">SELECT CONCAT_WS('-', class_name, title) FROM course;
SELECT FORMAT(1234.567, 4); # 输出 1,234.5670
SELECT SUBSTRING_INDEX('192.168.1.1', '.', -2) # 输出 0.100
SELECT SUBSTRING('HELLO,WORLD', 1, LOCATE(',', 'HELLO,WORLD') - 1); # 输出 HELLO
SELECT TRIM('  A   '); # 输出：A
SELECT TRIM('B' FROM 'BBBABBB&quot;); # 输出：A
</code></pre>
<h3 id="其他">其他</h3>
<table>
<thead>
<tr>
<th>函数名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ROUND(X, D)</td>
<td>对数值X进行四舍五入保留D为小数</td>
</tr>
<tr>
<td>RAND()</td>
<td>返回一个在0和1之间的随机数，使用在随机排序中时，性能会很差</td>
</tr>
<tr>
<td>CASE WHEN [condition] THEN result [WHEN [condition] THEN result ...] [ELSE result] END</td>
<td>case when</td>
</tr>
<tr>
<td>MD5(str)</td>
<td>返回str的MD5值</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<pre><code class="language-bash">SELECT user_name, 
CASE WHEN gender = 1 THEN '男'
WHEN gender = 0 THEN '女' ELSE '未知'
END AS '性别'
FROM user_things

# 随机获取10条数据
SELECT course_id FROM course
ORDER BY RAND() LIMIT 10
</code></pre>
<h2 id="事务与并发控制">事务与并发控制</h2>
<p>事务是数据库执行操作的最小的逻辑单元，事务可以由一个或多个SQL组成，这些事务的要么全部执行成功，要么全部执行失败。<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/image-20201026221028770.png" alt="事务相关命令" loading="lazy"></p>
<h3 id="事务的特性">事务的特性</h3>
<figure data-type="image" tabindex="1"><img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201026221301.png" alt="事务的特性" loading="lazy"></figure>
<h3 id="并发问题">并发问题</h3>
<ol>
<li>脏读：一个事务读取了另一个事务未提交的数据；</li>
<li>不可重复读：一个事务前后的两次读取，数据不一致；</li>
<li>幻读：一个事务两次查询的结果集记录数不一致。</li>
</ol>
<p>InnoDB的隔离级别，默认是RR<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201026221301.png" alt="隔离级别" loading="lazy"></p>
<p>查看事务的隔离级别</p>
<pre><code class="language-bash">show variables like '%iso%';
</code></pre>
<p>设置事务的隔离级别<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/image-20201026222637025.png" alt="设置事务的隔离级别" loading="lazy"><br>
InnoDB中的锁</p>
<ul>
<li>查询需要对资源加共享锁（S）</li>
<li>数据修改需要对资源加排他锁（X）<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201026221301.png" alt="InnoDB中的锁" loading="lazy"></li>
</ul>
<p>阻塞和死锁</p>
<ul>
<li>
<p>阻塞：由于不同锁之间的兼容关系，造成的一个事务需要等待另一个事务释放其所占用的资源的现象。</p>
<pre><code class="language-mysql"># 使用以下SQL可以查找出，阻塞超过30s的线程
 SELECT waiting_pid as '被阻塞的线程'，
        waiting_query as '被阻塞的SQL'，
        blocking_pid as '阻塞线程',
        wait_age as '阻塞时间',
        sql_kill_blocking_query as '建议操作'
 FROM sys.innodb_lock_waits
 WHERE (UNIX_TIMESTAMP() - UNIX_TIMESTAMP(wait_started)) &gt; 30
</code></pre>
<p>出现阻塞时，可以手动杀掉占用资源的事务（kill query connection_id），当最好的办法是优化占用资源事务的SQL，使其尽快释放资源。</p>
</li>
<li>
<p>死锁：并行执行的多个事务相互占用对方所需要的资源。</p>
<pre><code class="language-mysql"># 把死锁记录到mysql的错误日志中
 set global innodb_print_all_deadlocks=on;
</code></pre>
</li>
</ul>
]]></content>
    </entry>
</feed>