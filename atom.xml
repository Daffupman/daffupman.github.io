<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://daffupman.github.io</id>
    <title></title>
    <updated>2020-11-23T15:46:43.254Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://daffupman.github.io"/>
    <link rel="self" href="https://daffupman.github.io/atom.xml"/>
    <logo>https://daffupman.github.io/images/avatar.png</logo>
    <icon>https://daffupman.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, </rights>
    <entry>
        <title type="html"><![CDATA[MySQL的主从复制]]></title>
        <id>https://daffupman.github.io/YHepijchp/</id>
        <link href="https://daffupman.github.io/YHepijchp/">
        </link>
        <updated>2020-11-23T14:56:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="主从复制原理">主从复制原理</h2>
<figure data-type="image" tabindex="1"><img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/v2-41b7ab2686ae604c42af50078ed07f6f_1440w.jpg" alt="主从复制原理" loading="lazy"></figure>
<h2 id="搭建一主三从">搭建一主三从</h2>
<h3 id="修改配置文件">修改配置文件</h3>
<pre><code class="language-bash">    vi /etc/my.cnf
</code></pre>
<p>在主节点服务器的配置文件中的mysqld节点下增加配置</p>
<blockquote>
<p>log-bin=mysql-bin #表示启用二进制日志<br>
server-id=43 #表示server编号，编号要唯一</p>
</blockquote>
<p>在每个从节点服务器的配置文件中的mysqld节点下增加配置</p>
<blockquote>
<p>server-id=44</p>
</blockquote>
<h3 id="主节点创建复制日志用户">主节点创建复制日志用户</h3>
<pre><code class="language-bash">    # 创建专用于写binlog的用户
    create user 'write_bin_log'@'localhost' identified by 'writebinlog';
    # 授权
    grant replication slave on *.* to 'writebinlog'@'localhost';
    # 刷新权限
    flush privileges;
    # 查看主节点状态
    show master status;
    # 如果主节点不是初始状态，需要重置
    reset master
</code></pre>
<h3 id="检查从节点状态">检查从节点状态</h3>
<p>需要确保从节点执行命令 <code>show slave status</code> 时，显示的是：<code>Empty set</code>。如果不是的话，需要执行：</p>
<pre><code class="language-bash">    stop slave; #停止复制，相当于终止从服务器上的IO和SQL线程
    reset slave;
</code></pre>
<h3 id="设置从服务器的master">设置从服务器的master</h3>
<pre><code class="language-bash">    # 在从节点上设置，指定主节点
    change master to master_host='192.168.35.43',master_user='writebinlog',master_port=3306,master_password='writebinlog',master_log_file='mysql-bin.000001',master_log_pos=156;
    # 开始执行
    start slave;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis]]></title>
        <id>https://daffupman.github.io/1d0KrCQDR/</id>
        <link href="https://daffupman.github.io/1d0KrCQDR/">
        </link>
        <updated>2020-11-10T12:27:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="nosql数据库">NoSQL数据库</h2>
<p>NoSQL,即Not only SQL，不仅仅是SQL，泛指非关系型数据库。NoSQL不依赖业务逻辑方式存储，而以简单的key-value模式存储。因此大大地增加了数据库的扩展能力。NoSQL不遵循SQL标准，不支持ACID，当有着远超SQL的性能。</p>
<p>适用的场景有：对数据高并发的读写、海量数据的读写、对数据高扩展性的以及用不着sql的和用了sql也不行的情况。但不适用于需要事务支持，也不可用于基于sql的存储和查询。</p>
<h2 id="redis">Redis</h2>
<p>Redis是一个开源的key-value存储系统。Redis支持各种数据结构，包括string、list、set、zset和hash。这些数据类型都支持push/pop、add/remove及取交集并集和差集等丰富的操作，且这些操作都是原子性的。在此基础上，Redis支持各种不同方式的排序。为保证效率，Redis的数据都缓存在内存中，同时也会周期性地把数据写入磁盘或把修改操作写入记录文件，在此基础上实现master-slave同步。</p>
<p>Redis是单线程+IO多路复用技术。多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用select和poll函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行。</p>
<h3 id="安装">安装</h3>
<ol>
<li>下载地址：https://download.redis.io/releases/redis-5.0.5.tar.gz</li>
<li>在/opt目录下解压缩<pre><code class="language-bash">tar -zxvf redis-5.0.5.tar.gz
</code></pre>
</li>
<li>安装gcc环境<pre><code class="language-bash">yum -y install gcc-c++
</code></pre>
</li>
<li>在redis目录下编译运行<pre><code class="language-bash">make &amp;&amp; make install
</code></pre>
</li>
<li>配置文件到/etc/redis/下<pre><code class="language-bash">cp /opt/redis-5.0.5/redis.conf /etc/redis/
</code></pre>
</li>
<li>修改配置文件<pre><code class="language-bash">vim /etc/redis/redis.conf
</code></pre>
<blockquote>
<p>#修改daemonize为yes，后台运行<br>
daemonize yes<br>
#所有机器可连接<br>
bind 0.0.0.0<br>
#注释掉保护模式<br>
#protected-mode yes<br>
#设置登录密码<br>
requirepass root<br>
#设置工作目录<br>
dir /usr/local/redis</p>
</blockquote>
</li>
<li>开机自启
<ol>
<li>拷贝启动脚本到 <code>/etc/init.d</code> 下<pre><code class="language-bash">cp /opt/redis-5.0.5/utils/redis_init_script /etc/init.d
</code></pre>
</li>
<li>编辑脚本文件<pre><code class="language-bash">vim /etc/init.d/redis_init_script
</code></pre>
<blockquote>
<p>########### 第二行添加以下文字 ############<br>
#chkconfig: 22345 10 90<br>
#description: start redis at boot time<br>
#修改CONF属性值为redis自定义的配置<br>
CONF=&quot;/etc/redis/redis.conf&quot;</p>
</blockquote>
</li>
<li>加入系统自启<pre><code class="language-bash">chkconfig --add redis_init_script
</code></pre>
</li>
<li>开启脚本<pre><code class="language-bash">chkconfig redis_init_script on
</code></pre>
</li>
</ol>
</li>
<li>重启redis<pre><code class="language-bash">./etc/init.d/redis_init_script start
</code></pre>
</li>
</ol>
<h3 id="redis五大数据类型">Redis五大数据类型</h3>
<h4 id="string类型">String类型</h4>
<p>String是最基本的类型，采用key-value形式。String类型使二进制安全的，redis的String可以包含任何数据，如图片或序列化对象。一个Redis中字符串value最多可以是512M。使用示例：</p>
<blockquote>
<p>get <key>				# 查询对应的键值<br>
set <key> <value>		# 添加键值对<br>
append <key> <value>	# 将给定的value追加到原值的末尾<br>
strlen <key>			# 获得值得长度<br>
setnx <key> <value>		# key不存在时设置key<br>
incr <key>				# key值加一，如果key为null，key则为1<br>
decr <key>				# key值建议，如果key为null，key则为-1<br>
incrby/decrby <key> &lt;步长&gt;	#key值按指定步长变化<br>
mset <key1> <val1> <key2> <val2> ...# 同时设置一个或多个key-val对<br>
mget <key1> <val1> <key2> <val2> ...# 同时获取一个或多个value<br>
msetnx <key1> <val1> <key2> <val2>	# 同时设置一个或多个key-val对，当且仅当key都不存在<br>
getrange <key> <start> <end>	# 获得值得范围<br>
setrange <keu> <start> <value>	# 从start位置开始，用val覆写key所存储的值<br>
setex <key> <time> <value>		# 设置key-val，同时加上过期时间<br>
getset <key> <val>				# 设置新值，返回旧值</p>
</blockquote>
<h4 id="list类型">List类型</h4>
<p>单值多键。Redis列表是简单的字符串列表，按照插入顺序排序。key从列表的头部（左边）或尾部（右边）插入。List底层是双向链表，两端操作性能很高，中间的节点相对较差。</p>
<blockquote>
<p>lpush/rpush <key> <val1> <val2>...   # 从左边/右边插入一个或多个值<br>
lpop/rpop <key>  # 从左边/右边吐出一个值，值在键在，值光键亡<br>
rpoplpush <key1> <key2>  # 从key1列表右边吐出一个值，从左边插入&gt; key2<br>
lrange <key> <start> <stop>  # 按照索引下标获得元素（从左到右）<br>
lindex <key> <index>  # 按照索引下标获得元素（从左到右）<br>
llen <key>  # 获得列表长度<br>
linsert <key> before <val> <newVal>	 # 在val后面插入newValue<br>
lrem <key> <n> <val>	 # 从左边删除n个val</p>
</blockquote>
<h4 id="set类型">Set类型</h4>
<p>set可以自动去重，并判断某个成员是否在一个set集合类。set是String类型的无序集合，底层为一个value为null的hash表，所以删除、查找的复杂度都是O(1)。</p>
<blockquote>
<p>sadd <key> <val1> <val2>...			# 将多个元素放入到key集合中，相同的则忽略<br>
smembers <key>						# 取出该集合的所有值<br>
sismember <key> <val>				# 判断key集合是否有val值，有返1，无返0<br>
scard <key>							# 返回该集合的元素个数<br>
srem <key> <val1> <val2>			# 删除集合种的元素<br>
spop <key>							# 随机吐出一个值<br>
srandmember <key> <n>				# 随机从key集合中取出n个值，不会删除<br>
sint <key1> <key2>					# 返回两个集合的交集元素<br>
sunion <key1> <key2>				# 返回两个集合的并集元素<br>
sdiff <key1> <key2>					# 返回两个集合的差集元素</p>
</blockquote>
<h4 id="hash类型">Hash类型</h4>
<p>Hash是一个string类型的field和value的映射表，HashMap适合用于存储对象。使用示例：</p>
<blockquote>
<p>hset <key> <field> <value>		# 给key集合中的field键赋值value<br>
hget <key1> <field>				# 从key1集合field取出value<br>
hmset <key1> <field1> <val1> <field2> <val2>	# 批量设置hash的值<br>
hexists key <field>				# 查看hash表key中，给定field是否存在<br>
hkeys <key>						# 列出该hash集合的所有field<br>
hvals <key>						# 列出该hash集合的所有value<br>
hincrby <key> <field> <increment>	# 为hash表key中的域field的值加上increment<br>
hsetnx <key> <field> <value>	# 当field不存在时，将key中的field值设置为value</p>
</blockquote>
<h4 id="zset类型">zset类型</h4>
<p>zset是一个没有重复元素的字符串集合。与set集合不同的是，有序集合的每个成员都关联了一个评分，这个评分score被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但是评分可以是重复的。</p>
<p>因为元素是有序的，可以很快的根据评分或次序来获取一个范围的元素。访问有序集合的中间元素也很快。</p>
<p>使用示例：</p>
<blockquote>
<p>zadd <key> <score1> <val1> <score2> <val2>...	# 将一个或多个元素及其score值加入到有序集key中<br>
zrang <key> <start> <stop> [withscores]			# 返回有序集key中，下标在<start>和<stop>之间的元素（含scores）<br>
zrangebyscore key min max [withscores] [limit offset count]	# 返回有序集key中，所有score值介于min和max之间（包含）的成员，有序集成员按score值递增排列<br>
zrevrangebyscore key max min [withscores] [limit offset count]	# 同上，逆序<br>
zincrby <key> <incrment> <val>	# 为元素的score加上增量<br>
zrem <key> <val>	# 删除该集合下指定值得元素<br>
zcount <key> <min> <max>	#统计该集合，分数区间内的元素个数<br>
zrank <key> <val>	# 返回该值在集合中的排名（基于0）</p>
</blockquote>
<h2 id="redis事务">Redis事务</h2>
<p>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p>
<h3 id="特性">特性</h3>
<ol>
<li>单独的隔离操作</li>
<li>没有隔离级别概念</li>
<li>不保证原子性</li>
</ol>
<h3 id="指令">指令</h3>
<ul>
<li>multi：开启multi后，之后的命令入队，但不会执行；</li>
<li>exec：执行入队的命令；</li>
<li>discard：在入队的过程中可以使用discard放弃组队正常的事务执行流程。<br>
当组队阶段中某个命令出现了错误，在exec时整个队列都会被取消。如果执行阶段某个命令报错，只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。</li>
</ul>
<h3 id="事务的冲突和解决方式">事务的冲突和解决方式</h3>
<p>事务中可能存在的多个指令同时修改某个共享资源，但实际上有限的共享资源是不足以满足那些所有的指令的。这时候就是一个事务冲突的现象。一般可以借助悲观锁或乐观锁的思想解决。</p>
<h4 id="悲观锁pessimistic-lock">悲观锁（Pessimistic Lock）</h4>
<p>悲观锁认为每次对数据的操作都是会修改的，所有每次都会加上锁。在传统的关系型数据库中用的很多，比如：行锁、表锁、读锁、写锁等。</p>
<h4 id="乐观锁optimistic-lock">乐观锁（Optimistic Lock）</h4>
<p>与悲观锁相反，乐观锁认为每次对数据的操作都不会修改，所以并不会上锁，但会在数据更新的时候同时判断此期间原来的数据有没有被修改，一般使用版本号机制（check-and-set）。</p>
<p>在redis也有应用乐观锁的相应的指令：watch。在执行multi指令之前，先使用watch命令监视一个或多个key。</p>
<pre><code class="language-bash">watch k1 [k2, ...]
</code></pre>
<p>在事务执行（exec）之前，只要这些被监视的key有所改动，那么事务将被打断。也可使用unwatch取消对key的监视。</p>
<h2 id="redis的持久化">Redis的持久化</h2>
<p>redis是一种内存数据库，但也提供了持久化的技术。主要有RDB和AOF。</p>
<h3 id="rdbredis-database">RDB（Redis Database）</h3>
<p>在指定的时间内将内存中的数据集快照（snapshot）写入磁盘，恢复时将快照文件读入内存。</p>
<p>RDB的过程大致是这样的：Redis会单独创建（fork）一个子进程做持久化。子进程先将数据写入到一个临时文件中，待持久化结束后，再用这个临时文件替换上一次持久化好的文件。整个过程中，主进程不进行任何IO操作，确保了极高的性能。如果需要大规模数据的恢复，且对于数据的恢复的完整性不高，那RDB会比AOF更高效，但缺点就是丢失最后一次持久化的数据。</p>
<blockquote>
<p>关于fork：<br>
在linux系统中，调用fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调&gt; 用。出于效率考虑，Linux中引入“写时复制”技术，一般情况父进程和子进程会共用一段物理内存，只有&gt; 进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</p>
</blockquote>
<h4 id="配置文件相关的配置项">配置文件相关的配置项</h4>
<blockquote>
<p>#db保存的文件名称<br>
dbfilename dump.rdb<br>
#rdb文件的保存的路径<br>
dir ./<br>
#rdb的保存策略<br>
save 900 1<br>
save 300 10<br>
save 60 10000<br>
#当redis无法写入磁盘的话，直接关闭redis的写操作。可能造成数据不一致<br>
stop-writes-on-bgsave-error yes<br>
#进行RDB保存时将文件压缩，会消耗一些cpu的资源<br>
rdbcompression yes<br>
#关闭rdb存储数据时的数据校验，可提升性能，开启的话会有10%的性能损耗<br>
rdbchecksum no</p>
</blockquote>
<h4 id="备份与恢复">备份与恢复</h4>
<h5 id="备份">备份</h5>
<pre><code class="language-bash">config get dir	# 查询RDB文件的路径
cp *.rdb /target	# 复制备份文件到其他目录
</code></pre>
<h5 id="恢复">恢复</h5>
<pre><code class="language-bash">cp /target/* /redis	# 将备份的文件复制到dir下，redis启动时会自动加载
</code></pre>
<h4 id="rdb的优点和缺点">RDB的优点和缺点</h4>
<ul>
<li>优点
<ul>
<li>每隔一段时间全量备份数据</li>
<li>灾备简单，可远程传输</li>
<li>子进程备份的时候，主进程不会有任何io，保证数据的完整性</li>
<li>相对于aof，可以快速重启恢复大文件</li>
</ul>
</li>
<li>缺点
<ul>
<li>相对于aof，可以快速重启恢复大文件</li>
<li>子进程会和父进程占用的大小一样的内存，cpu压力大</li>
<li>不能实时备份</li>
</ul>
</li>
</ul>
<h3 id="aofappend-of-file">AOF（Append Of File）</h3>
<p>以日志的形式来记录每个写操作。将redis执行的每一个写指令（读指令不管）记录在文件里，该文件只能追加，不能更改。redis在启动之初，会读取日志文件，重新执行所有的命令。AOF默认不开启，需要修改配置文件。</p>
<blockquote>
<p>#开启aof<br>
appendonly yes<br>
#指定aof文件，路径与rdb一致<br>
appendfilename &quot;appendfileonly.aof&quot;</p>
</blockquote>
<p>apf的备份与恢复与rdb一样。当同时开启aof和rdb，系统默认读取aof的数据。如果aof文件损害，使用以下命令恢复：<code>redis-check-aof --fix appendonly.aof</code>。</p>
<h4 id="aof的配置">aof的配置</h4>
<blockquote>
<p>#appendfsync always<br>
appendfsync everysec	# 不确定则使用这个，每秒进行一次备份<br>
#appendfsync no</p>
<p>#重写的时候是否要同步，no可以保证数据安全<br>
no-appendfsync-on-rewrite no</p>
<p>#重写机制：避免文件越来越大，自动优化压缩指令，会fork一个新的进程去完成重写动作，新进程里的内存数据会被重写，此时旧的aof文件不会被读取使用，类似rdb<br>
#当前AOF文件的大小是上次AOF大小的100% 并且文件体积达到64m，满足两者则触发重写<br>
auto-aof-rewrite-percentage 100<br>
auto-aof-rewrite-min-size 64mb</p>
</blockquote>
<h4 id="aof的优点和缺点">aof的优点和缺点</h4>
<ul>
<li>优点：
<ul>
<li>aof操作可以增加数据的可靠性和完整性，还可以异步操作；</li>
<li>以日志的形式追加，在磁盘满的时候，会执行redis-check-aof；</li>
<li>数据大的时候，redis会自动重写aof，重写是安全的，不会影响到客户端的读写；</li>
</ul>
</li>
<li>缺点：
<ul>
<li>相同的数据，aof会比rdb占用的内存大；</li>
<li>aof的同步机制会不如rdb，aof每秒都做备份写数据，相对于rdb来说速度较慢。以fsync备份的话，可以提升速度，但也会影响cpu性能。</li>
</ul>
</li>
</ul>
<h3 id="rdb和aof选择问题">RDB和AOF选择问题</h3>
<p>RDB适合大量数据的恢复，但数据的完整性和一致性可能会不足。RDB可能会丢失最后一次的备份，作为缓存来说，是可以忍受的。但是缓存的数据是要保证数据的完整性，需要使用AOF。</p>
<ul>
<li>如果可以接受一段时间的缓存丢失，可以使用RDB</li>
<li>如果需要保证实时性的数据，使用AOF</li>
<li>RDB和AOF可以一起使用，RDB做冷备，可在不同时期对不同版本做备份，AOF做热备，数据可以只有1秒的丢失。当AOF不可用的使用，可以再用RDB恢复。也就是Redis的恢复会先加载AOF，如果AOF有问题，会加载RDB。</li>
<li>如果只做缓存，都不用</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL的索引及优化]]></title>
        <id>https://daffupman.github.io/WZxqM5YDi/</id>
        <link href="https://daffupman.github.io/WZxqM5YDi/">
        </link>
        <updated>2020-11-07T13:21:55.000Z</updated>
        <content type="html"><![CDATA[<p>对于MySQL来说，可以使用sql语句查询出我们需要的数据，这是最基本的功能。在表中数据量比较小的情况下，SQL的性能差异并不明显，但是在表数据量比较大的时候，SQL执行的效率就有明显的时间差异。这里会记录我们如何发现SQL的性能问题，如何优化SQL以及优化的底层原理。</p>
<h2 id="sql优化">SQL优化</h2>
<h3 id="测试数据准备">测试数据准备</h3>
<ul>
<li>测试数据文件：<code>https://github.com/datacharmer/test_db</code></li>
<li>导入数据<pre><code class="language-bash">mysql -uroot -proot &lt; employees.sql
</code></pre>
</li>
<li>测试数据导入是否成功<pre><code class="language-bash">mysql -uroot -proot -t &lt; test_employees_md5.sql
</code></pre>
</li>
</ul>
<h3 id="如何找出效率低的sql">如何找出效率低的SQL</h3>
<p>要解决SQL效率低的问题就是如何发现哪些SQL导致了执行效率。常用的方法就是 <code>打开慢查询日志</code> ，命令行方式如下：</p>
<pre><code class="language-bash"># 开启/关闭慢查询日志，默认off
set global slow_query_log = ON/OFF
# 设置慢查询日志的输出位置
set global slow_query_log_file = log/slow_query.log
# 设置慢查询的时间阀值，默认10秒，需要重新打开会话可见。测试的时候一般设置成1秒
set global long_query_time = 1
# 开启/关闭 记录没有使用索引的sql
set global log_queries_not_using_indexes = ON/OFF
</code></pre>
<p>配置文件方式如下（需要重启）：</p>
<pre><code class="language-bash">[mysqld]
log_output='FILE,TABLE'
slow_query_log=ON
long_query_time=0.001
slow_query_log_file=log/slow_query.log
</code></pre>
<blockquote>
<p>其他相关参数与默认值<br>
log_output：日志输出的地方。默认FILE，即文件。可以设成TABLE，则日志记录到mysql.slow_log中。也可以设置多种格式，如：FILE，TABLE。<br>
long_query_time：执行时间超过多久记录到慢查询日志，单位秒，默认10。<br>
log_queries_not_using_indexes：是否要将未使用索引的SQL记录到慢查询日志中，默认OFF。建议在开发环境开启，生产环境打开。<br>
log_throttle_queries_not_using_indexes：log_queries_not_using_indexes配置项开启生效，用于限制每分钟写入没有使用慢sql的数量，默认0。<br>
min_examined_row_limit：扫描行数至少达到多少行会记录到慢查询日志，默认0。<br>
log_slow_amdin_statements：是否要记录管理语句，默认关闭。管理语句包括：alter table，analyze table，check table，create index，drop index，optimize table，repair table。默认off。<br>
slow_query_log_file：指定慢查询日志文件路径，默认/var。<br>
log_slow_slave_statements：该参数在从库上设置，决定是否记录在复制过程中超过long_query_time的SQL，如果binlog格式是row，则改参数无效。<br>
log_slow_extra：当log_output=FILE，是否要记录额外信息（MySQL8.0.14），对log_output=TABLE无影响。</p>
</blockquote>
<p>这样所有的慢查询sql都会记录到 <code>log/slow_query.log</code> 文件里了。我们可以直接阅读文件里的内容，来分析sql的执行问题。但是一般都是借助工具来分析，主要有两种工具：</p>
<ul>
<li>mysql的官方工具 <code>mysqldumpslow</code>，使用命令：<pre><code class="language-bash">mysqldumpslow [OPTS...][LOGS...]
</code></pre>
示例：
<blockquote>
<p>mysqldumpslow -s t -t 10 -a db-slow.log</p>
</blockquote>
</li>
<li>percona工具，这是第三方的，需要先下载(https://www.percona.com/downloads/percona-toolkit/3.2.1/binary/redhat/7/x86_64/percona-toolkit-3.2.1-1.el7.x86_64.rpm)：<pre><code class="language-bash">yum install -y perl-DBD-MySQL.x86_64 perl-DBI.x86 perl-Time-HiRes.x86_64 perl-IO-Socket-SSL.noarch perl-TermReadKey.x86_64 perl-Digest-MD5
rpm -ivh percona-toolkit-3.2.1-1.el7.x86_64.rpm
</code></pre>
</li>
</ul>
<blockquote>
<p>数据库实时监控sql语句：</p>
<pre><code class="language-mysql">  SELECT id, `user`, `host`, DB, command, `time`, state, info 
  FROM information_schema.PROCESSLIST
  WHERE TIME &gt;= 60;
</code></pre>
</blockquote>
<h3 id="分析执行计划">分析执行计划</h3>
<h4 id="explain">EXPLAIN</h4>
<p>在获取到耗时较长的sql或我们刚写sql性能如何的时候，我们可以使用 <code>explain + SQL</code> 来输出sql的执行计划。<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201022224740.png" alt="explain语法" loading="lazy"><br>
执行某条sql输出的执行计划示例：<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201025213701.png" alt="示例执行计划" loading="lazy"><br>
可以看出执行计划有很多列，这里给出各个列的大致解释：</p>
<ul>
<li><code>id</code>：sql执行的顺序。id的值为一个数字或null。当id为一个数字的时候，表示查询执行的顺序；当id为null时，表示此行数据是由其他查询通过union出来的结果集。id值相同时，由上到下执行，id值不同，由大到小执行。</li>
<li><code>select_type</code>：查询类型，可选的值有：
<ul>
<li>SIMPLE：不包含子查询或是UNION操作的查询，多表JOIN也是SIMPLE；</li>
<li>PRIMARY：查询中如果包含任何子查询，那么最外层的查询则被标记为PRIMARY；</li>
<li>SUBQUERY：SELECT列表中的子查询；</li>
<li>DEPENDENT SUBQUERY：依赖外部结果的子查询；</li>
<li>UNION：union操作的第二个或是之后的查询的值为union；</li>
<li>DEPENDENT UNION：当union做为子查询时，第二个或第二个后的查询的select_type值；</li>
<li>UNION RESULT：UNION产生的结果集；</li>
<li>DERIVED：出现在FROM子句中的子查询。</li>
</ul>
</li>
<li><code>table</code>：指明从哪个表中获取数据。&lt;unionM,N&gt;由id为M和N查询union产生的结果集。&lt;derived N&gt;/&lt;subquery N&gt; 由id为n的查询产生的结果。</li>
<li><code>partitions</code>：对于分区表，显示查询的分区id；对于非分区表，显示NULL；</li>
<li><code>type</code>：索引使用的类型。<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201025223733.png" alt="type列的值" loading="lazy"></li>
<li><code>possible_keys</code>：查询中可能会用到的索引；</li>
<li><code>key</code>：查询是实际用到的索引；</li>
<li><code>key_len</code>：实际使用索引的最大长度，由字段长度决定的；</li>
<li><code>ref</code>：表示哪些列或常量被用于索引查找；</li>
<li><code>rows</code>：根据统计信息预估的扫描的行数；</li>
<li><code>filtered</code>：表示返回结果的行数占需读取行数的百分比；</li>
<li><code>extra</code>：sql查询的一些额外的信息，可能显示的如下
<ul>
<li>distinct：优化distinct操作，在找到第一匹配的元组后即停止；</li>
<li>not exists：使用not exists来优化查询；</li>
<li>using filesort：使用文件来进行排序，通常会出现在order by或group by查询中；</li>
<li>using index：使用了覆盖索引进行查询；</li>
<li>using temporary：MySQL需要使用临时表来处理查询，常见于排序，子查询和分组查询；</li>
<li>using where：需要在MySQL服务器层使用where条件来过滤数据；</li>
<li>select tables optimized away：直接通过索引来获得数据，不用访问表。</li>
</ul>
</li>
</ul>
<h4 id="show-profiles">SHOW PROFILES</h4>
<p>进行更细致的SQL性能分析。</p>
<pre><code class="language-bash">select @@have_profiling;    # 查看是否支持profile功能
select @@profiling; # 查看是否开启profile功能
set @@prfiling=1;   # 开启profile功能
set profiling_history_size=100; # 设置profiling处理的sql数量，默认15条
show profiles;
show profile for [all] query &lt;id&gt;;    # 查询指定id的sql执行详情
</code></pre>
<h4 id="optimizer-trace">optimizer trace</h4>
<h3 id="如何优化sql">如何优化sql</h3>
<p>可以从优化sql查询所涉及到的表中的索引或改写sql以达到更好的利用索引的目的。索引可以告诉存储引擎如何快速的查询到所需要的数据。</p>
<p>索引的数据结构：</p>
<ul>
<li>B树<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201114201514.png" alt="B树" loading="lazy">
<ul>
<li>根节点的子节点个数：2&lt;=x&lt;=m，m是树的阶；</li>
<li>中间节点的子节点个数：m/2 &lt;= y&lt;= m；</li>
<li>每个中间节点包含n个关键字，n=子节点个数-1且按升序排序</li>
<li>在关键字节点的左子树都是小于关键字的，右子树都是大于关键字的。</li>
</ul>
</li>
<li>B+树<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201114203716.png" alt="B+树" loading="lazy">
<ul>
<li>有n个子节点的节点中含有n个关键字；</li>
<li>叶子节点包含了所有关键字的信息，且关键字自小到大排序，形成一个有序链表；</li>
<li>非叶子节点只保存索引，叶子节点保存索引和数据。</li>
</ul>
</li>
<li>B树与B+树
<ul>
<li>B+树相对矮胖；</li>
<li>B树可以直接在非叶子节点上获取数据，B+树需要到叶子节点上才能获取数据；</li>
<li>B+树可以在范围查询的时候，在查询到某叶子节点后按链表向后遍历，效率会更高。</li>
</ul>
</li>
</ul>
<p>InnoDB的存储方式：</p>
<ul>
<li>B+树</li>
<li>主键索引：叶子节点存储主键和数据</li>
<li>非主键索引（二级索引、辅助索引）：叶子节点存储索引以及主键</li>
</ul>
<p>MyISAM存储方式：</p>
<ul>
<li>B+树</li>
<li>主键/非主键索引的叶子都是存储指向数据块的指针</li>
</ul>
<p>InnoDB支持的索引类型有：</p>
<ul>
<li>Btree索引：平常使用中，如果没有说明索引的类型，一般都是Btree索引；
<ul>
<li>使用B+树的结构存储索引数据；</li>
<li>适用于前缀查询</li>
<li>适用于全值匹配的查询
<blockquote>
<p>class_name = 'mysql' 或 class_name in ('mysql', 'postgreSQL')</p>
</blockquote>
</li>
<li>适合处理范围查找
<blockquote>
<p>study_cnt between 1000 and 3000 或 study_cnt &gt; 3000</p>
</blockquote>
</li>
<li>Btree索引的从索引的最左侧开始匹配查找列</li>
</ul>
</li>
<li>自适应Hash索引：为优化查询性能自动建立的，不需要开发人员或DBA手动管理；Hash索引的性能会比B树好些，但是Hash索引不是按照索引值排序，所以不可使用排序。也不支持部分索引列匹配查询，只支持等值查询，不支持范围查询，模糊查询。Hash冲突越严重，性能下降越厉害。
<blockquote>
<p>innodb_adaptive_hash_index</p>
</blockquote>
</li>
<li>全文索引：使用elasticsearch或solr</li>
<li>空间索引：存储GIS数据，地理位置的索引（不推荐）</li>
</ul>
<p>应该在什么列上建立索引？</p>
<ol>
<li>在where子句中的列，这些列是否有比较好的筛选性（列值的重复越小的，筛选性越好）</li>
<li>包含在ORDER BY、GROUP BY、DISTINCT中的字段</li>
<li>多表JOIN的关联列
<blockquote>
<p>创建索引：create index idx_xx ON table_name(column_name)<br>
查看索引：show index from table_name<br>
删除索引：alter table table_name drop index idx_xx</p>
</blockquote>
</li>
</ol>
<p>如何选择符合索引键的顺序？</p>
<ol>
<li>区分度最高的列放在联合索引的最左侧</li>
<li>使用最频繁的列放到联合索引的最左侧</li>
<li>尽量把字段长度小的列放在联合索引列的最左侧</li>
</ol>
<p>Btree索引的限制：</p>
<ul>
<li>只能从最左侧开始按索引键的顺序使用索引，不能跳过索引键</li>
<li>NOT IN和&lt;&gt;操作无法使用索引</li>
<li>索引列上不能使用表达式或者函数</li>
</ul>
<p>索引并非越多越好，索引可以提高查询效率，也会降低插入和更新的效率。使用IN查询是可以用到索引，但是IN查询列表很大，mysql引擎会认为使用全表扫描的效率更高而放弃使用索引。查询过滤的顺序也不必与索引键顺序相同才可以使用到索引，mysql引擎会自动调整顺序以适应索引顺序从而使用到索引。</p>
<h3 id="改写sql">改写SQL</h3>
<p>改写SQL的原则：</p>
<ul>
<li>使用outer join代替not in（MySQL8.0会自动转换）</li>
<li>使用CTE代替子查询</li>
<li>拆分复杂的大SQL为多个简单的小SQL</li>
<li>使用计算列优化查询<pre><code class="language-bash"># 可以生成一个total_score计算列。为计算列添加索引，可优化查询速度。
  alter table imc_classvalue add column total_score DECIMAL(3,1) as (content_score + level_score + logic_score) 
</code></pre>
</li>
</ul>
<h4 id="join语句的优化">JOIN语句的优化</h4>
<p>JOIN的类型有：<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/sql-join.png" alt="JOIN的类型" loading="lazy"></p>
<p>JOIN的算法：</p>
<ul>
<li>Nested Loop Join（NLJ）</li>
<li>Block Nested Loop Join（BNLJ）：使用join buffer降低对一张表的扫描次数，可以使用 <code>join_buffer_size</code>调整join_buffer大小；每个能被缓存的join都会分配一个join buffer，一个查询可能拥有多个join buffer。join buffer在执行连接之前会分配，在查询完成之后释放。但需要满足以下条件：
<ul>
<li>连接类型是ALL，index或是range；</li>
<li>第一个nonconst table不会分配join buffe，即使类型是all或index；</li>
<li>join buffer只会缓存需要的字段，非整行数据；</li>
</ul>
</li>
<li>Batched Key Access Join（BKA）：mysql5.6，基于Multi Range Read（MRR）。
<blockquote>
<p>MRR核心：将随机IO转换成顺序IO，从而提升性能。<br>
MRR参数：<br>
- optimizer_switch的子参数<br>
- mrr：是否开启mrr，on开启，off关闭<br>
- mrr_cost_based：表示是否要开启基于成本计算的MRR<br>
- batched_key_access：<br>
- read_rnd_buffer_size：指定mrr缓存大小</p>
</blockquote>
</li>
<li>Hash Join：mysql8.0.18，当限制会比较多，在mysql8.0.20限制会比较少，建议在8.0.20上使用。用来代替BNLJ。join buffer缓存外部循环hash表，内层循环遍历到hash表匹配。</li>
</ul>
<p>JOIN调优原则：</p>
<ul>
<li>小表驱动大表（优化器会自动执行，也可以使用 straight_join 指定驱动表）；</li>
<li>如果where条件，应当要能够使用索引，并尽可能地减少外层循环的数据量；</li>
<li>join的字段尽量创建索引；</li>
<li>尽量减少扫描的行数（限制在百万内）；</li>
<li>参与join的表不要太多（不超过3张）；</li>
<li>如果被驱动表的join字段用不了索引，且内存较为充足，可以考虑join buffer设置的大一些。</li>
</ul>
<h4 id="分页查询优化">分页查询优化</h4>
<ol>
<li>使用覆盖索引</li>
<li>使用覆盖索引 &amp; join</li>
<li>使用覆盖索引 &amp; 子查询</li>
<li>范围查询 &amp; limit语句</li>
<li>如果可以获取起始主键值和结束主键值，可以改成between...and</li>
<li>禁止过大页码</li>
</ol>
<h4 id="count优化">COUNT优化</h4>
<p>一些关于count的结论：</p>
<ol>
<li>count(*)和count(1)是一样的；</li>
<li>count(*)会选择最小的非主键索引，如果不存在任何非主键索引，则会使用主键；</li>
<li>count(*)不会排除null行，而count(字段)会排除；</li>
<li>如果没有特殊需求，尽量count(*)。</li>
</ol>
<p>优化建议：</p>
<ul>
<li>mysql8.0.13会针对无条件的count语句去优化</li>
<li>使用更小的非主键索引</li>
<li>把数据库引擎切换成MyISAM</li>
<li>使用并维护一张汇总表，</li>
<li>使用sql_calc_found_rows，未来会被废弃</li>
<li>使用缓存</li>
<li>查询information_schema.tables，估算值</li>
<li>show table status where name = 'user'，估算值</li>
<li>explain select * from salaries，估算值</li>
</ul>
<h4 id="order-by优化">ORDER BY优化</h4>
<p>MySQL的排序模式</p>
<ol>
<li>
<p>rowid排序（常规排序）</p>
<ol>
<li>过程
<ol>
<li>从表中获取满足where条件的记录；</li>
<li>对于每条记录，将记录的主键即排序键（id、order_column）取出放入sort buffer（<code>sort_buffer_size</code>）；</li>
<li>如果sort buffer能存放所有满足条件的id、order_column，则进行排序；否则sort buffer满后，排序并写到临时文件。快排算法；</li>
<li>若排序中产生了临时文件，需要利用归并排序算法，从而保证记录有序；</li>
<li>循环执行上述过程，知道所有满足条件的记录全部参与排序；</li>
<li>扫描排好序的id、order_colum对，并利用id去取select需要返回的其他字段；</li>
<li>返回结果集</li>
</ol>
</li>
<li>特点
<ol>
<li>如果sort buffer不能存放结果集里面的所有id、order_column，会产生临时文件</li>
<li>一次排序需要两次IO。
<blockquote>
<p>第二步：把id、order_column放入sort_buffer；第六步：通过id去获取需要返回的其他字段。由于返回结果是按照order_column排序的，所以id是乱序的，会存在随机io的问题。MySQL内部针对这种情况做了优化。在用id取数据之前，会按照id排序并放到一个缓存里面，这个缓存大小由<code>read_rnd_buffer_size</code> 控制，接着再去记录，从而把随机io转换成顺序io。</p>
</blockquote>
</li>
</ol>
</li>
</ol>
</li>
<li>
<p>全字段排序（优化排序）<br>
直接取出SQL中需要的所有的字段，放到sort buffer中。由于sort buffer已经包含了查询需要的所有字段，因此在sort buffer中排序完成后可直接返回。<br>
相对于rowid排序，全字段排序的优缺点有：</p>
<ul>
<li>性能提升，无需两次io；</li>
<li>一行数据占用的空间回比rowid排序的要多，更容易导致临时文件。</li>
</ul>
</li>
<li>
<p>rowid和全字段是如何选择的？<br>
当order by SQL中出现字段的总长度小于配置项 <code>max_length_for_sort_data</code> ，会使用全字段排序，否则使用rowid排序。</p>
</li>
<li>
<p>打包字段排序<br>
MySQL5.7引入，全字段模式的优化，工作原理一样，但是将字段紧密地排列在一起，而不是使用固定长度空间。</p>
</li>
</ol>
<p>如何调优order by：</p>
<ul>
<li>利用索引，防止filesort发生</li>
<li>如果发生filesort，并且没法避免，需要优化filesort
<ul>
<li>调大sort_buffer_size，减少/避免临时文件和归并操作
<ul>
<li>optimizer trace中 <code>num_initial_chunks_spilled_to_disk</code>的值</li>
<li>sort_merge_passess变量的值</li>
</ul>
</li>
<li>调大 <code>read_rnd_buffer_size</code>，让一次顺序io返回的结果更多</li>
<li>设置合理的 <code>max_length_for_sort_data</code> 的值（一般不调整）</li>
<li>调小 <code>max_sort_length</code>，即排序时最多取多少字节</li>
</ul>
</li>
</ul>
<h4 id="group-by优化">GROUP BY优化</h4>
<p>MySQL有如下处理group by语句的方式，性能一次递减：</p>
<ul>
<li>松散索引扫描（Loose Index Scan）<br>
无需扫描满足条件的所有索引键即可返回结果。在explain语句的extra中会显示 <code>using index for group by</code>。但是sql需要满足：查询是作用在单张表上的，GROUP BY指定的所有字段要符合最左前缀原则，而且没有其他字段。如果存在聚合函数，只支持min()/max()，并且如果同时使用了min()和max()，则必须作用于同一个字段。聚合函数作用的字段必须在索引中，并且紧跟GROUP BY所指定的字段。如果查询中存在除GROUP BY指定的列以外的其他部分，则必须以常量的形式出现。</li>
<li>紧凑索引扫描（Tight Index Scan）</li>
<li>临时表（Temporary table）</li>
</ul>
<h3 id="表设计的优化">表设计的优化</h3>
<ol>
<li>
<p>表属性尽量不要设置为NULL。<br>
NULL是默认行为，如果不指定列字段为NOT NULL的，那么它就是NULL的。NULL并非不占用存储空间，反而需要MySQL需要额外的存储空间和逻辑处理，而且对于可为null的索引列，其使用和统计都会更加复杂。NULL参与的查询是需要使用IS NULL/IS NOT NULL作为条件的；当索引为NULL的值作为条件时，这个sql不会用到索引，NULL参与的计算，其结果都为NULL，聚合查询的结果都会忽略值NULL的记录；在排序中NULL值所在列也会排在最前面。</p>
</li>
<li>
<p>不随意设置数据类型<br>
创建表时要指定主键，主键不应该具有业务含义。虽然MySQL允许创建表时不指定主键，但是在表中没有非空整型唯一索引的时候InnoDB会自动添加隐式主键。<br>
选择合适的数据类型和恰当的取值范围。使用存储所需的最小数据类型；选择简单的数据类型；存储小数直接选择decimal；尽量避免使用text和blob。<br>
不建议使用枚举ENUM类型。枚举类型的值都是从允许值列表中选择的，这个列表在创建表结构就定义好了。枚举的优点是：枚举存储是数字，数据会更加紧凑；允许值提前定义，MySQL可以检查出数据的正确性。查询枚举列值的时候，默认显示的是枚举的值，如果想查询枚举的索引，需要给列加0。比如<code>select name, gender from user;</code> 可以查出枚举列gender的枚举值，而 <code>select name, gender + 0 from user;</code> 可以查出枚举列gender的枚举索引。使用枚举同样需要注意：</p>
<ul>
<li>对枚举列使用sum、avg等聚合函数的时候，会使用枚举列的索引。因为聚合函数的参数是数字；</li>
<li>对枚举列排序的时候，是根据其索引排序的；如果要按值排序，需要使用concat函数；</li>
<li>如果将数据存储到ENUM列中，则将数字视为可能值得索引，存储的值是具有该索引的枚举成员。如果存储的是字符串的数字，MySQL会先转成数值类型，去匹配索引序号。</li>
</ul>
</li>
<li>
<p>正确的使用索引。<br>
字符串类型的查询的时候没有使用引号，是不会使用索引的。where条件左边的字段参与了函数或数学运算，不会使用索引；联合索引最左前缀顺序不匹配，不使用索引。<br>
不再使用的索引需要及时删除，否则MySQL需要维护索引，浪费空间和性能。为选择性低的列创建索引意义不大。列值过长，可以选择部分前缀作为索引，而不是整列加上索引。表记录不超过1000行，不需要创建索引。一张表的索引不要超过5个。</p>
<blockquote>
<p>select count(distinct(concat(first_name, left(last_name, 3))))/count(*) from user;  # 查询出的值越接近1，代表选择性越好</p>
</blockquote>
</li>
</ol>
<h3 id="其他地方的优化">其他地方的优化</h3>
<ol>
<li>
<p>MySQL连接设置<br>
MySQL默认的连接超时是8小时(28800秒)，对应的配置参数是 <code>wait_timeout</code>。一般在连接的参数配置做自动重连。</p>
<blockquote>
<p>jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;chararchterEncoding=utf8&amp;autoReconnect=true</p>
</blockquote>
<p>但是autoReconnect是有副作用的。原有连接上的事务将会被回滚，连接中持有的表将会全部释放，连接关联的会话session将会丢失，连接中定义的用户变量将会丢失，连接中定义的预编译SQL将会丢失。可以修改MySQL配置，避免断开连接。</p>
<blockquote>
<p>[mysqld]<br>
wait_timeout = 288000<br>
interactive_timeout = 28800</p>
</blockquote>
<p>连接池的配置同样也会影响连接，如HikariCP配置：</p>
<ul>
<li>maximum-pool-size：最大连接数目。超过这个数目，新的数据库访问线程会被阻塞。推荐大小为cpu核心数*2+硬盘数；</li>
<li>minimum-idle：最小连接数目；</li>
<li>max-lifetime：最大连接生命时间，用来设置一个connection在连接池中的存活时间；</li>
<li>idle-timeout：一个链接idle状态的最大时长，超时则被释放。</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Shiro安全框架]]></title>
        <id>https://daffupman.github.io/a5-Z-yWdo/</id>
        <link href="https://daffupman.github.io/a5-Z-yWdo/">
        </link>
        <updated>2020-11-07T04:40:16.000Z</updated>
        <content type="html"><![CDATA[<p>最近的项目用了shiro框架，自己也搜索了一些入门资料。比较推荐的是《跟我学shiro》，内容翔实，举例丰富，有着配套的代码库。链接：https://www.iteye.com/blog/jinnianshilongnian-2018398。现在是对学习到的内容做个总结。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL8.0的新特性]]></title>
        <id>https://daffupman.github.io/2mvyKxMdI/</id>
        <link href="https://daffupman.github.io/2mvyKxMdI/">
        </link>
        <updated>2020-11-07T04:01:21.000Z</updated>
        <content type="html"><![CDATA[<p>MySQL8.0提供了一些实用的功能特性，这里会一一举例介绍。</p>
<h2 id="通用表达式common-table-expressions">通用表达式（Common Table Expressions）</h2>
<p>CTE会生成临时表，但只会在查询期间有效，这个临时表在这个查询中可以多次引用和自引用。它的语法：<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201021222724.png" alt="" loading="lazy"><br>
这个特性会比较适合写一些表中存在递归场景的查询，如：</p>
<pre><code class="language-mysql">    # CTE递归生成序列
    WITH RECURSIVE test(n) AS (
        SELECT 1 AS n
        UNION ALL
        SELECT 1+n FROM test WHERE n &lt; 10
    )
    SELECT * FROM test
</code></pre>
<h2 id="窗口函数">窗口函数</h2>
<p>提供了更方便的统计功能，语法如下：<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201021224651.png" alt="" loading="lazy"><br>
其中funcation_name可以是以下的函数：</p>
<table>
<thead>
<tr>
<th>函数名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>聚合函数</td>
<td>聚合函数都可以作为窗口函数使用</td>
</tr>
<tr>
<td>ROW_NUMBER()</td>
<td>返回窗口分区内数据的行号</td>
</tr>
<tr>
<td>RANK()</td>
<td>类似于row_number，只是对于相同数据会产生重复的行号，之后的数据行号会产生间隔</td>
</tr>
<tr>
<td>DENSE_RANK()</td>
<td>类似于rank，区别在于当组内某行数据重复时，虽然行号会重复，当后续的行号不会产生间隔</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL拾贝]]></title>
        <id>https://daffupman.github.io/mysql-shi-bei/</id>
        <link href="https://daffupman.github.io/mysql-shi-bei/">
        </link>
        <updated>2020-11-06T14:36:10.000Z</updated>
        <content type="html"><![CDATA[<p>MySQL是一款非常流行，免费高性能的数据库。但是在对了解MySQl之前，需要先了解一下数据库的基本概念，这在数据库领域是通识的。接着是对MySQL的一些基础做一下简单的介绍。再着就是MySQL的高级部分了，有索引优化，MySQL版本以及服务器的配置等介绍。</p>
<h2 id="什么是数据库">什么是数据库</h2>
<p>数据库（Database），顾名思义，就是一个存储数据的仓库，本质上还是一个文件系统。但，它会按照特定的格式将数据存储起来，方便我们对数据库中的数据进行增加、删除、修改和查询等操作。</p>
<p>计算机中主要有两个地方可以存储数据。一个是内存，一个是磁盘。数据存储在内存中会有这样明显的有点：存储和访问的速度很快，但是在断电和程序结束时，数据就会被清空。而且内存相对于磁盘来说，容量比较小，价格贵。把数据存储到磁盘上，是可以永久保存下去的，但是操作数据的速度就远没有存储在内存中那么快了。存储在内存或磁盘都是有各自的优点的，我们可以利用内存快的优点来存储一些访问频繁的数据，而不活跃的数据可以放到磁盘中。重要的数据还是要存储在磁盘中的。</p>
<h2 id="数据库的类型">数据库的类型</h2>
<p>现代的数据库主要有两类：关系型和非关系型。他们的区别可以相比较着来看：</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">关系型</th>
<th style="text-align:center">非关系型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">结构上</td>
<td style="text-align:center">数据存储在二维表中</td>
<td style="text-align:center">数据存储的时候没有固定的结构</td>
</tr>
<tr>
<td style="text-align:center">事务上</td>
<td style="text-align:center">支持事务的ACID</td>
<td style="text-align:center">对事务的支持较弱，但是对数据的并发处理性能好</td>
</tr>
<tr>
<td style="text-align:center">SQL支持</td>
<td style="text-align:center">支持SQL</td>
<td style="text-align:center">不支持SQL</td>
</tr>
<tr>
<td style="text-align:center">总结</td>
<td style="text-align:center">适合使用在数据存在一定关系，需要关联查询，需要事务支持和SQL的场景</td>
<td style="text-align:center">适合对数据结构灵活，不需要事务，要求读写并发的场景</td>
</tr>
</tbody>
</table>
<h2 id="mysql安装">MySQL安装</h2>
<p>由于数据库一般都是放在linux上面的，这里就装在linux系统上面了，用的是centos7。首先要去官网下载安装，地址：https://downloads.mysql.com/archives/get/p/23/file/mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz。然后上传到linux服务器上，我这里是放到opt目录下的，安装的具体步骤如下：</p>
<ol>
<li>
<p>首先要解压文件，设置用户</p>
<pre><code class="language-bash"># 进入opt目录
cd /opt
# 解压文件
tar -xvJf mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz
# 名字过长，重命名并移动到/usr/local下
mv mysql-8.0.20-linux-glibc2.12-x86_64 /usr/local/mysql-8.0.20
# 给mysql创建一个专用的帐户，最好也设置密码
useradd mysql
passwd mysql
</code></pre>
</li>
<li>
<p>添加配置</p>
<pre><code class="language-bash"># 修改配置文件
vi /etc/my.cnf
</code></pre>
<p>配置文件的内容如下</p>
<blockquote>
<p>[client]<br>
port=3306<br>
socket=/usr/local/mysql-8.0.20/mysql.sock<br>
default-character-set=utf8mb4</p>
<p>[mysqld]<br>
port=3306<br>
user=mysql<br>
socket=/usr/local/mysql-8.0.20/mysql.sock<br>
basedir=/usr/local/mysql-8.0.20<br>
datadir=/usr/local/mysql-8.0.20/data<br>
character-set-server=utf8mb4</p>
<p>[mysqld_safe]<br>
log-error=/usr/local/mysql-8.0.20/data/mysql-error.log<br>
pid-file=/usr/local/mysql-8.0.20/data/mysql.pid</p>
</blockquote>
<p>根据配置文件的 <code>datadir</code> 项，创建一个data目录</p>
<pre><code class="language-bash">mkdir data
</code></pre>
<p>修改mysql软件的目录的所属者</p>
<pre><code class="language-bash">chown -R mysql.mysql /usr/local/mysql-8.0.20
</code></pre>
</li>
<li>
<p>运行和修改MySQL<br>
初始化mysql，注意这里会生成一个密码</p>
<pre><code class="language-bash">/usr/local/mysql-8.0.20/bin/mysqld  --initialize --user=mysql --basedir=/usr/local/mysql-8.0.20 --datadir=/usr/local/mysql-8.0.20/data/
</code></pre>
<p>拷贝启动文件</p>
<pre><code class="language-bash">cp /usr/local/mysql-8.0.20/support-files/mysql.server /etc/init.d/mysqld
</code></pre>
<p>启动并连接mysql，这里输入的密码就是初始化时生成的密码</p>
<pre><code class="language-bash">service mysqld start
/usr/local/mysql-8.0.20/bin/mysql -uroot -p
</code></pre>
<p>进入mysql后，一定要先修改密码</p>
<pre><code class="language-bash"># 将root帐户的密码设置成root
alter user 'root'@'localhost' identified by 'root';
</code></pre>
<p>此时也可以创建用户</p>
<pre><code class="language-bash"># 创建daff@localhost用户，密码是daff
create user 'daff'@'localhost' identified by 'daff';
# 给daff@localhost授予所有数据库的所有表的所有权限
grant all privileges on *.* to 'daff'@'localhost';
# 刷新权限，使得用户的权限生效
flush privileges;
</code></pre>
<p>修改root用户可远程连接，对于所有要远程连接的帐户，都需要这样设置</p>
<pre><code class="language-bash"># 在所有的机器上都可以使用root身份连接过来
update mysql.user set host = '%' where user = 'root';
# 设置远程连接的密码，使用mysql_native_password是为了和很多的数据库客户端兼容
alter user 'root'@'%' identified with mysql_native_password by 'root';
</code></pre>
<blockquote>
<p>如果远程客户端连接不上mysql，需要检查一下防火墙是否关闭或端口是否开放。</p>
</blockquote>
</li>
</ol>
<h2 id="mysql常见的存储引擎">MySQL常见的存储引擎</h2>
<p>MySQL支持多种存储引擎，具体如下：</p>
<table>
<thead>
<tr>
<th>引擎名称</th>
<th>事务</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><em><strong>InnoDB</strong></em></td>
<td>Y</td>
<td>事务型存储引擎</td>
</tr>
<tr>
<td>MyISAM</td>
<td>N</td>
<td>MySQL5.6之前的默认引擎，最常用的非事务型存储引擎</td>
</tr>
<tr>
<td>CSV</td>
<td>N</td>
<td>以CSV格式存储的非事务型存储引擎</td>
</tr>
<tr>
<td>Archive</td>
<td>N</td>
<td>只允许查询和新增数据而不允许修改的非事务型存储引擎，占用空间小</td>
</tr>
<tr>
<td>Memory</td>
<td>N</td>
<td>一种易失性非事务型存储引擎</td>
</tr>
</tbody>
</table>
<p>但常用的只有InnoDB和MyISAM。最重要的还是InnoDB，再来具体看看这种存储引擎的特点：</p>
<ul>
<li>支持ACID；</li>
<li>数据按主键聚集存储；</li>
<li>支持行级锁和MVCC（多版本并发控制，进一步避免读写操作的阻塞）；</li>
<li>支持BTree和自适应Hash索引；</li>
<li>支持全文和空间索引（最好不用）。</li>
</ul>
<h2 id="mysql的数据类型">MySQL的数据类型</h2>
<p>存储在MySQL中的数据主要又三种类型：数值类型、日期时间类型和字符串类型。<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20190513123402.png" alt="MySQL数据类型——数值类型" loading="lazy"><br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20190513123528.png" alt="MySQL数据类型——日期时间类型" loading="lazy"><br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20190513123646.png" alt="MySQL数据类型——字符串类型" loading="lazy"></p>
<p>在创建数据库表的时候，需要认真考虑名称以及字段的类型，一般我们有以下的原则来作为指导：</p>
<ul>
<li>为数据选择合适的数据类型
<ul>
<li>优先选择符合存储数据需要的最小数据类型</li>
<li>谨慎使用ENUM和TEXT，这会影响到查询的性能，如果要使用，最好独立成一张表。text类型的列不要有默认值。</li>
<li>财务相关的数值类型，必须使用decimal。</li>
</ul>
</li>
<li>为表和列选择合适的名字
<ul>
<li>所有数据库对象名称必须使用小写字母，可使用下划线分割；</li>
<li>所有数据库对象名称定义禁止使用MySQL保留关键字；</li>
<li>数据对象的命名需要做到见名知义，最好不要超过32个字符；</li>
<li>临时库表需要以tmp为前缀，日期为后缀；</li>
<li>备份库表以bak为前缀，日期为后缀</li>
</ul>
</li>
</ul>
<h2 id="sql常用语法">SQL常用语法</h2>
<h3 id="表结构相关的操作">表结构相关的操作</h3>
<ul>
<li>创建表<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201107002406.png" alt="创建表的语法" loading="lazy"></li>
<li>修改表<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201107002654.png" alt="修改表的语法" loading="lazy"></li>
<li>删除表<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201107002850.png" alt="删除表的语法" loading="lazy"></li>
<li>查看表结构<pre><code class="language-bash">desc tb_name;
# 查看表的ddl
show create table tb_name;
</code></pre>
</li>
<li>单表约束
<ul>
<li>主键约束：<code>primary key</code></li>
<li>唯一约束：<code>unique</code></li>
<li>非空约束：<code>not null</code></li>
<li>默认约束：<code>default</code></li>
</ul>
</li>
</ul>
<h3 id="表数据相关的操作">表数据相关的操作</h3>
<ul>
<li>新增数据<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201107003403.png" alt="新增SQL语法" loading="lazy"></li>
<li>删除数据<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201107003704.png" alt="删除SQL语法" loading="lazy"></li>
<li>修改数据<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201107003747.png" alt="修改SQL语法" loading="lazy"></li>
<li>查询数据<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201107003515.png" alt="查询SQL语法" loading="lazy"></li>
<li>表的复制<pre><code class="language-bash"># 复制表结构
create table new_tb_name like old_tb_name;
# 复制表结构和数据
create table new_tb_name select * from old_tb_name;
</code></pre>
</li>
<li>视图<br>
视图是一个逻辑的存储结构，也可以看出一张虚拟的表。可以像查询表一样查询视图。视图本身不存储数据。创建视图语法：<pre><code class="language-bash">CREATE VIEW view_name
AS SELECT [ALL | DISTINCT | DISTINCTROW]
select_expr [, select_expr ...]
[FROM table_references]
[WHERE where_condition]
</code></pre>
</li>
</ul>
<h2 id="系统函数">系统函数</h2>
<p>MySQL提供了丰富的函数来处理数据，以下会罗列一些比较常用的函数。</p>
<h3 id="时间函数">时间函数</h3>
<table>
<thead>
<tr>
<th>函数名</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>CURDATE()/CURTIME()</td>
<td style="text-align:left">返回当前日期/返回当前时间</td>
</tr>
<tr>
<td>NOW()</td>
<td style="text-align:left">返回当前的日期和时间</td>
</tr>
<tr>
<td>DATE_FORMAT(date, fmt)</td>
<td style="text-align:left">按照fmt的格式，对日期date进行格式化</td>
</tr>
<tr>
<td>SEC_TO_TIME(seconds)</td>
<td style="text-align:left">把秒数转换成时间（小时：分：秒）</td>
</tr>
<tr>
<td>TIME_TO_SEC(seconds)</td>
<td style="text-align:left">把时间（小时：分：秒）转换成秒数</td>
</tr>
<tr>
<td>DATEDIFF(date1,date2)</td>
<td style="text-align:left">返回date1和date2相差的天数</td>
</tr>
<tr>
<td>DATE_ADD(date, INTERVAL expr unit)</td>
<td style="text-align:left">对给定的日期增加或减少指定的时间单元（unit:DAY/HOUR/MINUTS/SECOND）</td>
</tr>
<tr>
<td>EXTRACT(unit FROM date)</td>
<td style="text-align:left">返回日期date的指定部分</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<pre><code class="language-bash">SELECT DATE_FORMAT(NOW(), '%Y / %m / %d  %H : %i : %s'); # 按格式输出 2020 / 10 / 22  05 : 38 : 43
SELECT SEC_TO_TIME(60) # 输出 00:01:00
SELECT TIME_TO_SEC('1:00:00') # 输出 3600

SELECT NOW(),
    DATE_ADD(NOW(), INTERVAL 1 DAY), # 当前时间加一天
    DATE_ADD(NOW(), INTERVAL 1 YEAR),  # 当前时间加一年
    DATE_ADD(NOW(), INTERVAL -1 DAY), # 当前时间减一天
    DATE_ADD(NOW(), INTERVAL '-1:30' HOUR_MINUTE); # 当前时间减1.5h
    
SELECT EXTRACT(YEAR FROM now()) # 提取当前日期的年份
</code></pre>
<h3 id="字符串函数">字符串函数</h3>
<table>
<thead>
<tr>
<th>函数名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>CONCAT(str1, str2, ...)</td>
<td>把字符串str1，str2等连接成一个字符串</td>
</tr>
<tr>
<td>CONCAT_WS(sep, str1, str2, ...)</td>
<td>用指定的分隔符sep连接字符串</td>
</tr>
<tr>
<td>CHAR_LENGTH(str)</td>
<td>返回字符串str的字符个数（1个字符=3个字节）</td>
</tr>
<tr>
<td>LENGTH(str)</td>
<td>返回字符串str的字节个数</td>
</tr>
<tr>
<td>FORMAT(X, D [, locale])</td>
<td>将数字N格式化</td>
</tr>
<tr>
<td>LEFT(str, len) / RIGHT(str, len)</td>
<td>从字符串的左/右起返回len长度的子字符串</td>
</tr>
<tr>
<td>SUBSTRING(str, pos[, len])</td>
<td>从字符串str的pos位置起返回长度为len的子串</td>
</tr>
<tr>
<td>SUBSTRING_INDEX(str, delim, count)</td>
<td>返回字符串str按delim分隔的前count个子字符串</td>
</tr>
<tr>
<td>LOCATE(substr, str)</td>
<td>在字符串str中返回子串substr第一次出现的位置</td>
</tr>
<tr>
<td>TRIM([remstr FROM] str)</td>
<td>删除字符串str两端的指定的remstr</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<pre><code class="language-bash">SELECT CONCAT_WS('-', class_name, title) FROM course;
SELECT FORMAT(1234.567, 4); # 输出 1,234.5670
SELECT SUBSTRING_INDEX('192.168.1.1', '.', -2) # 输出 0.100
SELECT SUBSTRING('HELLO,WORLD', 1, LOCATE(',', 'HELLO,WORLD') - 1); # 输出 HELLO
SELECT TRIM('  A   '); # 输出：A
SELECT TRIM('B' FROM 'BBBABBB&quot;); # 输出：A
</code></pre>
<h3 id="其他">其他</h3>
<table>
<thead>
<tr>
<th>函数名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ROUND(X, D)</td>
<td>对数值X进行四舍五入保留D为小数</td>
</tr>
<tr>
<td>RAND()</td>
<td>返回一个在0和1之间的随机数，使用在随机排序中时，性能会很差</td>
</tr>
<tr>
<td>CASE WHEN [condition] THEN result [WHEN [condition] THEN result ...] [ELSE result] END</td>
<td>case when</td>
</tr>
<tr>
<td>MD5(str)</td>
<td>返回str的MD5值</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<pre><code class="language-bash">SELECT user_name, 
CASE WHEN gender = 1 THEN '男'
WHEN gender = 0 THEN '女' ELSE '未知'
END AS '性别'
FROM user_things

# 随机获取10条数据
SELECT course_id FROM course
ORDER BY RAND() LIMIT 10
</code></pre>
<h2 id="事务与并发控制">事务与并发控制</h2>
<p>事务是数据库执行操作的最小的逻辑单元，事务可以由一个或多个SQL组成，这些事务的要么全部执行成功，要么全部执行失败。<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/image-20201026221028770.png" alt="事务相关命令" loading="lazy"></p>
<h3 id="事务的特性">事务的特性</h3>
<figure data-type="image" tabindex="1"><img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201026221301.png" alt="事务的特性" loading="lazy"></figure>
<h3 id="并发问题">并发问题</h3>
<ol>
<li>脏读：一个事务读取了另一个事务未提交的数据；</li>
<li>不可重复读：一个事务前后的两次读取，数据不一致；</li>
<li>幻读：一个事务两次查询的结果集记录数不一致。</li>
</ol>
<p>InnoDB的隔离级别，默认是RR<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201026221301.png" alt="隔离级别" loading="lazy"></p>
<p>查看事务的隔离级别</p>
<pre><code class="language-bash">show variables like '%iso%';
</code></pre>
<p>设置事务的隔离级别<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/image-20201026222637025.png" alt="设置事务的隔离级别" loading="lazy"><br>
InnoDB中的锁</p>
<ul>
<li>查询需要对资源加共享锁（S）</li>
<li>数据修改需要对资源加排他锁（X）<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201026221301.png" alt="InnoDB中的锁" loading="lazy"></li>
</ul>
<p>阻塞和死锁</p>
<ul>
<li>
<p>阻塞：由于不同锁之间的兼容关系，造成的一个事务需要等待另一个事务释放其所占用的资源的现象。</p>
<pre><code class="language-mysql"># 使用以下SQL可以查找出，阻塞超过30s的线程
 SELECT waiting_pid as '被阻塞的线程'，
        waiting_query as '被阻塞的SQL'，
        blocking_pid as '阻塞线程',
        wait_age as '阻塞时间',
        sql_kill_blocking_query as '建议操作'
 FROM sys.innodb_lock_waits
 WHERE (UNIX_TIMESTAMP() - UNIX_TIMESTAMP(wait_started)) &gt; 30
</code></pre>
<p>出现阻塞时，可以手动杀掉占用资源的事务（kill query connection_id），当最好的办法是优化占用资源事务的SQL，使其尽快释放资源。</p>
</li>
<li>
<p>死锁：并行执行的多个事务相互占用对方所需要的资源。</p>
<pre><code class="language-mysql"># 把死锁记录到mysql的错误日志中
 set global innodb_print_all_deadlocks=on;
</code></pre>
</li>
</ul>
]]></content>
    </entry>
</feed>