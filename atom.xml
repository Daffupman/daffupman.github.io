<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://daffupman.github.io</id>
    <title></title>
    <updated>2020-11-07T05:25:55.643Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://daffupman.github.io"/>
    <link rel="self" href="https://daffupman.github.io/atom.xml"/>
    <logo>https://daffupman.github.io/images/avatar.png</logo>
    <icon>https://daffupman.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, </rights>
    <entry>
        <title type="html"><![CDATA[Shiro安全框架]]></title>
        <id>https://daffupman.github.io/a5-Z-yWdo/</id>
        <link href="https://daffupman.github.io/a5-Z-yWdo/">
        </link>
        <updated>2020-11-07T04:40:16.000Z</updated>
        <content type="html"><![CDATA[<p>最近的项目用了shiro框架，自己也搜索了一些入门资料。比较推荐的是跟着涛哥学shiro，内容翔实，举例丰富，有着配套的代码库。链接：https://www.iteye.com/blog/jinnianshilongnian-2018398。现在是对学习到的内容做个总结。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL8.0的新特性]]></title>
        <id>https://daffupman.github.io/2mvyKxMdI/</id>
        <link href="https://daffupman.github.io/2mvyKxMdI/">
        </link>
        <updated>2020-11-07T04:01:21.000Z</updated>
        <content type="html"><![CDATA[<p>MySQL8.0提供了一些实用的功能特性，这里会一一举例介绍。</p>
<h2 id="通用表达式common-table-expressions">通用表达式（Common Table Expressions）</h2>
<p>CTE会生成临时表，但只会在查询期间有效，这个临时表在这个查询中可以多次引用和自引用。它的语法：<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201021222724.png" alt="" loading="lazy"><br>
这个特性会比较适合写一些表中存在递归场景的查询，如：</p>
<pre><code class="language-mysql">    # CTE递归生成序列
    WITH RECURSIVE test(n) AS (
        SELECT 1 AS n
        UNION ALL
        SELECT 1+n FROM test WHERE n &lt; 10
    )
    SELECT * FROM test
</code></pre>
<h2 id="窗口函数">窗口函数</h2>
<p>提供了更方便的统计功能，语法如下：<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201021224651.png" alt="" loading="lazy"><br>
其中funcation_name可以是以下的函数：</p>
<table>
<thead>
<tr>
<th>函数名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>聚合函数</td>
<td>聚合函数都可以作为窗口函数使用</td>
</tr>
<tr>
<td>ROW_NUMBER()</td>
<td>返回窗口分区内数据的行号</td>
</tr>
<tr>
<td>RANK()</td>
<td>类似于row_number，只是对于相同数据会产生重复的行号，之后的数据行号会产生间隔</td>
</tr>
<tr>
<td>DENSE_RANK()</td>
<td>类似于rank，区别在于当组内某行数据重复时，虽然行号会重复，当后续的行号不会产生间隔</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL拾贝]]></title>
        <id>https://daffupman.github.io/mysql-shi-bei/</id>
        <link href="https://daffupman.github.io/mysql-shi-bei/">
        </link>
        <updated>2020-11-06T14:36:10.000Z</updated>
        <content type="html"><![CDATA[<p>MySQL是一款非常流行，免费高性能的数据库。但是在对了解MySQl之前，需要先了解一下数据库的基本概念，这在数据库领域是通识的。接着是对MySQL的一些基础做一下简单的介绍。再着就是MySQL的高级部分了，有索引优化，MySQL版本以及服务器的配置等介绍。</p>
<h2 id="什么是数据库">什么是数据库</h2>
<p>数据库（Database），顾名思义，就是一个存储数据的仓库，本质上还是一个文件系统。但，它会按照特定的格式将数据存储起来，方便我们对数据库中的数据进行增加、删除、修改和查询等操作。</p>
<p>计算机中主要有两个地方可以存储数据。一个是内存，一个是磁盘。数据存储在内存中会有这样明显的有点：存储和访问的速度很快，但是在断电和程序结束时，数据就会被清空。而且内存相对于磁盘来说，容量比较小，价格贵。把数据存储到磁盘上，是可以永久保存下去的，但是操作数据的速度就远没有存储在内存中那么快了。存储在内存或磁盘都是有各自的优点的，我们可以利用内存快的优点来存储一些访问频繁的数据，而不活跃的数据可以放到磁盘中。重要的数据还是要存储在磁盘中的。</p>
<h2 id="数据库的类型">数据库的类型</h2>
<p>现代的数据库主要有两类：关系型和非关系型。他们的区别可以相比较着来看：</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">关系型</th>
<th style="text-align:center">非关系型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">结构上</td>
<td style="text-align:center">数据存储在二维表中</td>
<td style="text-align:center">数据存储的时候没有固定的结构</td>
</tr>
<tr>
<td style="text-align:center">事务上</td>
<td style="text-align:center">支持事务的ACID</td>
<td style="text-align:center">对事务的支持较弱，但是对数据的并发处理性能好</td>
</tr>
<tr>
<td style="text-align:center">SQL支持</td>
<td style="text-align:center">支持SQL</td>
<td style="text-align:center">不支持SQL</td>
</tr>
<tr>
<td style="text-align:center">总结</td>
<td style="text-align:center">适合使用在数据存在一定关系，需要关联查询，需要事务支持和SQL的场景</td>
<td style="text-align:center">适合对数据结构灵活，不需要事务，要求读写并发的场景</td>
</tr>
</tbody>
</table>
<h2 id="mysql安装">MySQL安装</h2>
<p>由于数据库一般都是放在linux上面的，这里就装在linux系统上面了，用的是centos7。首先要去官网下载安装，地址：https://downloads.mysql.com/archives/get/p/23/file/mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz。然后上传到linux服务器上，我这里是放到opt目录下的，安装的具体步骤如下：</p>
<ol>
<li>
<p>首先要解压文件，设置用户</p>
<pre><code class="language-bash"># 进入opt目录
cd /opt
# 解压文件
tar -xvJf mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz
# 名字过长，重命名并移动到/usr/local下
mv mysql-8.0.20-linux-glibc2.12-x86_64 /usr/local/mysql-8.0.20
# 给mysql创建一个专用的帐户，最好也设置密码
useradd mysql
passwd mysql
</code></pre>
</li>
<li>
<p>添加配置</p>
<pre><code class="language-bash"># 修改配置文件
vi /etc/my.cnf
</code></pre>
<p>配置文件的内容如下</p>
<blockquote>
<p>[client]<br>
port=3306<br>
socket=/usr/local/mysql-8.0.20/mysql.sock</p>
<p>[mysqld]<br>
port=3306<br>
user=mysql<br>
socket=/usr/local/mysql-8.0.20/mysql.sock<br>
basedir=/usr/local/mysql-8.0.20<br>
datadir=/usr/local/mysql-8.0.20/data</p>
</blockquote>
<p>根据配置文件的 <code>datadir</code> 项，创建一个data目录</p>
<pre><code class="language-bash">mkdir data
</code></pre>
<p>修改mysql软件的目录的所属者</p>
<pre><code class="language-bash">chown -R mysql.mysql /usr/local/mysql-8.0.20
</code></pre>
</li>
<li>
<p>运行和修改MySQL<br>
初始化mysql，注意这里会生成一个密码</p>
<pre><code class="language-bash">/usr/local/mysql-8.0.20/bin/mysqld  --initialize --user=mysql --basedir=/usr/local/mysql-8.0.20 --datadir=/usr/local/mysql-8.0.20/data/
</code></pre>
<p>拷贝启动文件</p>
<pre><code class="language-bash">cp /usr/local/mysql-8.0.20/support-files/mysql.server /etc/init.d/mysqld
</code></pre>
<p>启动并连接mysql，这里输入的密码就是初始化时生成的密码</p>
<pre><code class="language-bash">service mysqld start
/usr/local/mysql-8.0.20/bin/mysql -uroot -p
</code></pre>
<p>进入mysql后，一定要先修改密码</p>
<pre><code class="language-bash"># 将root帐户的密码设置成root
alter user 'root'@'localhost' identified by 'root';
</code></pre>
<p>此时也可以创建用户</p>
<pre><code class="language-bash"># 创建daff@localhost用户，密码是daff
create user 'daff'@'localhost' identified by 'daff';
# 给daff@localhost授予所有数据库的所有表的所有权限
grant * on *.* to 'daff'@'localhost';
# 刷新权限，使得用户的权限生效
flush privileges；
</code></pre>
<p>修改root用户可远程连接，对于所有要远程连接的帐户，都需要这样设置</p>
<pre><code class="language-bash"># 在所有的机器上都可以使用root身份连接过来
update mysq.user set host = '%' where user = 'root';
# 设置远程连接的密码，使用mysql_native_password是为了和很多的数据库客户端兼容
alter user 'root'@'%' identified with mysql_native_password by 'root';
</code></pre>
<blockquote>
<p>如果远程客户端连接不上mysql，需要检查一下防火墙是否关闭或端口是否开放。</p>
</blockquote>
</li>
</ol>
<h2 id="mysql常见的存储引擎">MySQL常见的存储引擎</h2>
<p>MySQL支持多种存储引擎，具体如下：</p>
<table>
<thead>
<tr>
<th>引擎名称</th>
<th>事务</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><em><strong>InnoDB</strong></em></td>
<td>Y</td>
<td>事务型存储引擎</td>
</tr>
<tr>
<td>MyISAM</td>
<td>N</td>
<td>MySQL5.6之前的默认引擎，最常用的非事务型存储引擎</td>
</tr>
<tr>
<td>CSV</td>
<td>N</td>
<td>以CSV格式存储的非事务型存储引擎</td>
</tr>
<tr>
<td>Archive</td>
<td>N</td>
<td>只允许查询和新增数据而不允许修改的非事务型存储引擎，占用空间小</td>
</tr>
<tr>
<td>Memory</td>
<td>N</td>
<td>一种易失性非事务型存储引擎</td>
</tr>
</tbody>
</table>
<p>但常用的只有InnoDB和MyISAM。最重要的还是InnoDB，再来具体看看这种存储引擎的特点：</p>
<ul>
<li>支持ACID；</li>
<li>数据按主键聚集存储；</li>
<li>支持行级锁和MVCC（多版本并发控制，进一步避免读写操作的阻塞）；</li>
<li>支持BTree和自适应Hash索引；</li>
<li>支持全文和空间索引（最好不用）。</li>
</ul>
<h2 id="mysql的数据类型">MySQL的数据类型</h2>
<p>存储在MySQL中的数据主要又三种类型：数值类型、日期时间类型和字符串类型。<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20190513123402.png" alt="MySQL数据类型——数值类型" loading="lazy"><br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20190513123528.png" alt="MySQL数据类型——日期时间类型" loading="lazy"><br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20190513123646.png" alt="MySQL数据类型——字符串类型" loading="lazy"></p>
<p>在创建数据库表的时候，需要认真考虑名称以及字段的类型，一般我们有以下的原则来作为指导：</p>
<ul>
<li>为数据选择合适的数据类型
<ul>
<li>优先选择符合存储数据需要的最小数据类型</li>
<li>谨慎使用ENUM和TEXT，这会影响到查询的性能，如果要使用，最好独立成一张表。text类型的列不要有默认值。</li>
<li>财务相关的数值类型，必须使用decimal。</li>
</ul>
</li>
<li>为表和列选择合适的名字
<ul>
<li>所有数据库对象名称必须使用小写字母，可使用下划线分割；</li>
<li>所有数据库对象名称定义禁止使用MySQL保留关键字；</li>
<li>数据对象的命名需要做到见名知义，最好不要超过32个字符；</li>
<li>临时库表需要以tmp为前缀，日期为后缀；</li>
<li>备份库表以bak为前缀，日期为后缀</li>
</ul>
</li>
</ul>
<h2 id="sql常用语法">SQL常用语法</h2>
<h3 id="表结构相关的操作">表结构相关的操作</h3>
<ul>
<li>创建表<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201107002406.png" alt="创建表的语法" loading="lazy"></li>
<li>修改表<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201107002654.png" alt="修改表的语法" loading="lazy"></li>
<li>删除表<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201107002850.png" alt="删除表的语法" loading="lazy"></li>
<li>查看表结构<pre><code class="language-bash">desc tb_name;
# 查看表的ddl
show create table tb_name;
</code></pre>
</li>
<li>单表约束
<ul>
<li>主键约束：<code>primary key</code></li>
<li>唯一约束：<code>unique</code></li>
<li>非空约束：<code>not null</code></li>
<li>默认约束：<code>default</code></li>
</ul>
</li>
</ul>
<h3 id="表数据相关的操作">表数据相关的操作</h3>
<ul>
<li>新增数据<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201107003403.png" alt="新增SQL语法" loading="lazy"></li>
<li>删除数据<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201107003704.png" alt="删除SQL语法" loading="lazy"></li>
<li>修改数据<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201107003747.png" alt="修改SQL语法" loading="lazy"></li>
<li>查询数据<br>
<img src="https://for-markdown.oss-cn-shanghai.aliyuncs.com/20201107003515.png" alt="查询SQL语法" loading="lazy"></li>
<li>表的复制<pre><code class="language-bash"># 复制表结构
create table new_tb_name like old_tb_name;
# 复制表结构和数据
create table new_tb_name select * from old_tb_name;
</code></pre>
</li>
<li>视图<br>
视图是一个逻辑的存储结构，也可以看出一张虚拟的表。可以像查询表一样查询视图。视图本身不存储数据。创建视图语法：<pre><code class="language-bash">CREATE VIEW view_name
AS SELECT [ALL | DISTINCT | DISTINCTROW]
select_expr [, select_expr ...]
[FROM table_references]
[WHERE where_condition]
</code></pre>
</li>
</ul>
<h2 id="系统函数">系统函数</h2>
<p>MySQL提供了丰富的函数来处理数据，以下会罗列一些比较常用的函数。</p>
<ul>
<li>
<p>时间函数</p>
<table>
<thead>
<tr>
<th>函数名</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>CURDATE()/CURTIME()</td>
<td style="text-align:left">返回当前日期/返回当前时间</td>
</tr>
<tr>
<td>NOW()</td>
<td style="text-align:left">返回当前的日期和时间</td>
</tr>
<tr>
<td>DATE_FORMAT(date, fmt)</td>
<td style="text-align:left">按照fmt的格式，对日期date进行格式化</td>
</tr>
<tr>
<td>SEC_TO_TIME(seconds)</td>
<td style="text-align:left">把秒数转换成时间（小时：分：秒）</td>
</tr>
<tr>
<td>TIME_TO_SEC(seconds)</td>
<td style="text-align:left">把时间（小时：分：秒）转换成秒数</td>
</tr>
<tr>
<td>DATEDIFF(date1,date2)</td>
<td style="text-align:left">返回date1和date2相差的天数</td>
</tr>
<tr>
<td>DATE_ADD(date, INTERVAL expr unit)</td>
<td style="text-align:left">对给定的日期增加或减少指定的时间单元（unit:DAY/HOUR/MINUTS/SECOND）</td>
</tr>
<tr>
<td>EXTRACT(unit FROM date)</td>
<td style="text-align:left">返回日期date的指定部分</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<pre><code class="language-bash">SELECT DATE_FORMAT(NOW(), '%Y / %m / %d  %H : %i : %s'); # 按格式输出 2020 / 10 / 22  05 : 38 : 43
SELECT SEC_TO_TIME(60) # 输出 00:01:00
SELECT TIME_TO_SEC('1:00:00') # 输出 3600

SELECT NOW(),
	DATE_ADD(NOW(), INTERVAL 1 DAY), # 当前时间加一天
	DATE_ADD(NOW(), INTERVAL 1 YEAR),  # 当前时间加一年
	DATE_ADD(NOW(), INTERVAL -1 DAY), # 当前时间减一天
	DATE_ADD(NOW(), INTERVAL '-1:30' HOUR_MINUTE); # 当前时间减1.5h
	
SELECT EXTRACT(YEAR FROM now()) # 提取当前日期的年份
</code></pre>
</li>
<li>
<p>字符串函数</p>
<table>
<thead>
<tr>
<th>函数名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>CONCAT(str1, str2, ...)</td>
<td>把字符串str1，str2等连接成一个字符串</td>
</tr>
<tr>
<td>CONCAT_WS(sep, str1, str2, ...)</td>
<td>用指定的分隔符sep连接字符串</td>
</tr>
<tr>
<td>CHAR_LENGTH(str)</td>
<td>返回字符串str的字符个数（1个字符=3个字节）</td>
</tr>
<tr>
<td>LENGTH(str)</td>
<td>返回字符串str的字节个数</td>
</tr>
<tr>
<td>FORMAT(X, D [, locale])</td>
<td>将数字N格式化</td>
</tr>
<tr>
<td>LEFT(str, len) / RIGHT(str, len)</td>
<td>从字符串的左/右起返回len长度的子字符串</td>
</tr>
<tr>
<td>SUBSTRING(str, pos[, len])</td>
<td>从字符串str的pos位置起返回长度为len的子串</td>
</tr>
<tr>
<td>SUBSTRING_INDEX(str, delim, count)</td>
<td>返回字符串str按delim分隔的前count个子字符串</td>
</tr>
<tr>
<td>LOCATE(substr, str)</td>
<td>在字符串str中返回子串substr第一次出现的位置</td>
</tr>
<tr>
<td>TRIM([remstr FROM] str)</td>
<td>删除字符串str两端的指定的remstr</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<pre><code class="language-bash">SELECT CONCAT_WS('-', class_name, title) FROM course;
SELECT FORMAT(1234.567, 4); # 输出 1,234.5670
SELECT SUBSTRING_INDEX('192.168.1.1', '.', -2) # 输出 0.100
SELECT SUBSTRING('HELLO,WORLD', 1, LOCATE(',', 'HELLO,WORLD') - 1); # 输出 HELLO
SELECT TRIM('  A   '); # 输出：A
SELECT TRIM('B' FROM 'BBBABBB&quot;); # 输出：A
</code></pre>
</li>
<li>
<p>其他</p>
<table>
<thead>
<tr>
<th>函数名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ROUND(X, D)</td>
<td>对数值X进行四舍五入保留D为小数</td>
</tr>
<tr>
<td>RAND()</td>
<td>返回一个在0和1之间的随机数，使用在随机排序中时，性能会很差</td>
</tr>
<tr>
<td>CASE WHEN [condition] THEN result [WHEN [condition] THEN result ...] [ELSE result] END</td>
<td>case when</td>
</tr>
<tr>
<td>MD5(str)</td>
<td>返回str的MD5值</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<pre><code class="language-bash">SELECT user_name, 
CASE WHEN gender = 1 THEN '男'
WHEN gender = 0 THEN '女' ELSE '未知'
END AS '性别'
FROM user_things

# 随机获取10条数据
SELECT course_id FROM course
ORDER BY RAND() LIMIT 10
</code></pre>
</li>
</ul>
]]></content>
    </entry>
</feed>